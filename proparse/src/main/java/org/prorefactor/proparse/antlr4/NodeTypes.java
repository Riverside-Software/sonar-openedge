/*******************************************************************************
 * Copyright (c) 2003-2015 John Green
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    John Green - initial API and implementation and/or initial documentation
 *******************************************************************************/ 
package org.prorefactor.proparse.antlr4;

import org.prorefactor.proparse.ProParser;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * For node type names and numbers, this class provides:
 * <ul>
 * <li>get the string type name of an integer token type
 * <li>get the integer token type of a string type name
 * </ul>
 * Couldn't just use the literals table, because it does not contain the names for synthetic node types.
 */
public class NodeTypes {

  private static final Map<String, Integer> literalsMap = new HashMap<>();
  private static final Map<String, Integer> userliterals = new HashMap<>();
  private static final Map<String, Integer> nameNums = new HashMap<>();
  private static final TI[] typeInfoArray = new TI[PreprocessorParser.Last_Token_Number + 1];
  private static final TokenInfo[] allTokens = new TokenInfo[PreprocessorParser.Last_Token_Number + 1];

  private NodeTypes() {
    // Shouldn't be instantiated
  }

  // Type Info
  private static class TI {
    private int bitset;
    private byte minAbbrev;
    private String fullText;
    private List<String> altFullText;

    static final int NO_FLAGS = 0;
    static final int EXTRA_LITERAL = 0;
    static final int KEYWORD = 1;
    static final int RESERVED = 2;
    // Some functions fit more than one of these categories:
    // - some function names are reserved, especially the old oddball
    // ones like ACCUMULATE as well as some old record handling
    // functions like AVAILABLE.
    // - some functions may look like a regular function, where a left
    // paren follows the function name.
    // - some functions may be just the function keyword by themselves
    // without any arguments
    static final int MAY_BE_REGULAR_FUNC = 4;
    static final int MAY_BE_NO_ARG_FUNC = 8;
    // Is the keyword a system handle name?
    static final int SYSHDL = 16;
  }

  private static class TokenInfo {
    boolean isNatural = true;
    String keywordText = null;
  }

  /**
   * Returns the list of all keywords in upper-case, including abbreviated names and alternate names 
   */
  public static Set<String> getAllKeywords() {
    Set<String> kwSet = new HashSet<>();
    for (TI typeInfo: typeInfoArray) {
      if ((typeInfo != null) && ((typeInfo.bitset & TI.KEYWORD) > 0)) {
        kwSet.add(typeInfo.fullText.toUpperCase());
        if (typeInfo.altFullText != null) {
          for (String str : typeInfo.altFullText) {
            kwSet.add(str.toUpperCase());
          }
        }
        int size = typeInfo.fullText.length();
        for (int i = typeInfo.minAbbrev; i <= size; ++i) {
          kwSet.add(typeInfo.fullText.substring(0, i).toUpperCase());
        }

      }
    }

    return kwSet;
  }

  static void add(int type, int minAbbrev, String fullText, int flags) {
    // For some token types, there are "synonym" literals. For those synonym literals,
    // there's no point in listing the flags twice, so we just use a null flag of EXTRA_LITERAL. The algorithm makes
    // sure that flags are only added once, i.e. if bitset is greater than zero then no more flags are added.
    int size = fullText.length();
    for (int i = minAbbrev; i <= size; ++i) {
      literalsMap.put(fullText.substring(0, i), type);
    }
    TI ti = typeInfoArray[type];
    if (ti == null) {
      ti = new TI();
      typeInfoArray[type] = ti;
      ti.minAbbrev = (byte) minAbbrev;
      ti.fullText = fullText;
    } else {
      if (ti.altFullText == null)
        ti.altFullText = new ArrayList<>();
      ti.altFullText.add(fullText);
    }
    
    if (ti.bitset == 0)
      ti.bitset = flags;
    nameNums.put(ProParser._tokenNames[type], type);
  }

  /**
   * Returns uppercase of the type info record's full text. Returns null if there's no type info for the type number.
   * Returns empty string if there's no text for the type.
   */
  public static String getFullText(int type) {
    if (!isValidType(type))
      return null;
    TI ti = typeInfoArray[type];
    if (ti == null)
      return null;
    String s = ti.fullText;
    if (s == null)
      return "";
    return s.toUpperCase();
  }

  public static String getFullText(String text) {
    Integer type = literalsMap.get(text);
    if (type == null)
      return "";
    return typeInfoArray[type].fullText.toUpperCase();
  }

  /**
   * Get the type name (different than the keyword literal text) for a type number. Any "_KW" suffix is stripped.
   * 
   * @param n type number
   * @return null if out of range
   */
  public static String getTypeName(int n) {
    if (n > PreprocessorParser.Last_Token_Number || n < 1)
      return null;
    String ret = ProParser._tokenNames[n];
    if (ret.endsWith("_KW"))
      ret = ret.substring(0, ret.length() - 3);
    return ret;
  }

  /**
   * Get the type number for a type name. For those type names that have it, the "_KW" suffix is optional.
   * 
   * @param s type name
   * @return -1 if invalid type name is entered.
   */
  public static int getTypeNum(String s) {
    Integer ret = nameNums.get(s);
    if (ret == null) {
      // It's possible that we've been passed a token type name which needs
      // to have the _KW suffix added to it.
      ret = nameNums.get(s + "_KW");
    }
    if (ret == null)
      return -1;
    return ret;
  }

  public static boolean isAbbreviated(String text) {
    String lowText = text.toLowerCase();
    Integer nodeType = literalsMap.get(lowText);
    if (nodeType == null)
      return false;
    if (typeInfoArray[nodeType].fullText.startsWith(lowText)) {
      return typeInfoArray[nodeType].fullText.length() > lowText.length();
    } else if (typeInfoArray[nodeType].altFullText == null) {
      // Should never be the case
      return true;
    } else {
      for (String s : typeInfoArray[nodeType].altFullText) {
        if (s.startsWith(lowText)) {
          return s.length() > lowText.length();
        }
      }
    }
    return true;
  }

  public static boolean isKeywordType(int nodeType) {
    return isValidType(nodeType) && ((typeInfoArray[nodeType].bitset & TI.KEYWORD) > 0);
  }

  public static boolean isMethodModifier(int type) {
    switch (type) {
      case PreprocessorParser.PUBLIC:
      case PreprocessorParser.PROTECTED:
      case PreprocessorParser.PRIVATE:
      case PreprocessorParser.OVERRIDE:
      case PreprocessorParser.FINAL:
        return true;
      default:
        return false;
    }
  }

  public static boolean isReserved(int nodeType) {
    return isValidType(nodeType) && ((typeInfoArray[nodeType].bitset & TI.RESERVED) > 0);
  }

  public static boolean isSystemHandleName(int nodeType) {
    return isValidType(nodeType) && ((typeInfoArray[nodeType].bitset & TI.SYSHDL) > 0);
  }

  static boolean isUnreservedKeywordType(int nodeType) {
    return isValidType(nodeType) && ((typeInfoArray[nodeType].bitset & TI.KEYWORD) > 0)
        && ((typeInfoArray[nodeType].bitset & TI.RESERVED) == 0);
  }

  static boolean isValidType(int type) {
    return (type > 0) && (type <= PreprocessorParser.Last_Token_Number) && (typeInfoArray[type] != null);
  }

  static boolean mayBeNoArgFunc(int nodeType) {
    return isValidType(nodeType) && ((typeInfoArray[nodeType].bitset & TI.MAY_BE_NO_ARG_FUNC) > 0);
  }

  static boolean mayBeRegularFunc(int nodeType) {
    return isValidType(nodeType) && ((typeInfoArray[nodeType].bitset & TI.MAY_BE_REGULAR_FUNC) > 0);
  }

  static int minAbbrev(int nodeType) {
    if (!isValidType(nodeType))
      return -1;
    return typeInfoArray[nodeType].minAbbrev;
  }

  /**
   * Test if a literal string maps to a keyword literal or a user defined literal.
   * 
   * @param text Literal string to match.
   * @param ttype Default return, if no match is found.
   * @return Token type if matched, input ttype if no match.
   */
  public static int testLiteralsTable(String text, int ttype) {
    String lowText = text.toLowerCase();
    Integer ret = literalsMap.get(lowText);
    if (ret != null)
      return ret;
    ret = userliterals.get(lowText);
    if (ret != null)
      return ret;
    return ttype;
  }

  public static void userLiteralAdd(String text, String ttype) throws Exception {
    String lowType = ttype.toLowerCase();
    Integer typeNum = getTypeNum(lowType);
    // The documentation states that the second parameter must be a valid Proparse
    // token type, but we'll also check the literals table.
    if (typeNum == -1) {
      typeNum = literalsMap.get(lowType);
      if (typeNum == null)
        throw new Exception("dictadd(PreprocessorParser.): Invalid token type");
    }
    userliterals.put(text.toLowerCase(), typeNum);
  }

  public static void userLiteralDelete(String text) {
    userliterals.remove(text);
  }

  public static boolean userLiteralTest(String text, int ttype) {
    Integer t = userliterals.get(text.toLowerCase());
    return (t != null) && (t == ttype);
  }

  /**
   * A "natural" node is one that represents a real token in the original source code. A "synthetic" token is one that
   * was created by the parser just for syntax tree organization. By convention, a natural node has a node name that is
   * ALLCAPS, and a synthetic node has a node name which is Mixed_Case.
   */
  public static boolean isNatural(int tokenType) {
    TokenInfo info = getInfo(tokenType);
    if (info == null)
      return false;
    return info.isNatural;
  }

  private static TokenInfo getInfo(int tokenType) {
    if (tokenType < 1 || tokenType > PreprocessorParser.Last_Token_Number)
      return null;
    return allTokens[tokenType];
  }

  /**
   * Get the token name for this token type.
   * 
   * @return null if invalid token type.
   */
  public static String getTokenName(int tokenType) {
    TokenInfo info = getInfo(tokenType);
    if (info == null)
      return null;
    return NodeTypes.getTypeName(tokenType);
  }

  /**
   * Proparse tracks keywords that are part of the syntax, but does not track keywords that are only attribute/method
   * names. DISPLAY is a keyword type, ID is not. See Proparse's node attribute documentation for NODE_TYPE_KEYWORD.
   */
  public static boolean hasDefaultText(int tokenType) {
    TokenInfo info = getInfo(tokenType);
    if (info == null)
      return false;
    return (info.keywordText != null);
  }

  /**
   * For integer token types that represent a keyword in the syntax, this returns the full keyword text/name.
   * 
   * @return null if invalid token type or is not a keyword according to Proparse.
   * @see #hasDefaultText(int)
   */
  public static String getDefaultText(int tokenType) {
    TokenInfo info = getInfo(tokenType);
    if (info == null)
      return null;
    return info.keywordText;
  }

  // Last, because it's huge.
  // NO-SONAR
  static {
    // For synonyms, the *last* added literal becomes the default literal.
    add(PreprocessorParser.AACBIT, 5, "_cbit", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.AACONTROL, 8, "_control", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.AALIST, 5, "_list", TI.KEYWORD);
    add(PreprocessorParser.AAMEMORY, 7, "_memory", TI.KEYWORD | TI.SYSHDL);
    add(PreprocessorParser.AAMSG, 4, "_msg", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.AAPCONTROL, 9, "_pcontrol", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.AASERIAL, 7, "_serial-num", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.AATRACE, 6, "_trace", TI.KEYWORD);
    add(PreprocessorParser.ABSOLUTE, 3, "absolute", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ABSTRACT, 8, "abstract", TI.KEYWORD);
    add(PreprocessorParser.ACCELERATOR, 11, "accelerator", TI.KEYWORD);
    add(PreprocessorParser.ACCUMULATE, 5, "accumulate", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ACTIVEFORM, 11, "active-form", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ACTIVEWINDOW, 13, "active-window", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.ADD, 3, "add", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ADDINTERVAL, 12, "add-interval", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ADVISE, 6, "advise", TI.KEYWORD);
    add(PreprocessorParser.ALERTBOX, 9, "alert-box", TI.KEYWORD);
    add(PreprocessorParser.ALIAS, 5, "alias", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ALL, 3, "all", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ALLOWREPLICATION, 17, "allow-replication", TI.KEYWORD);
    add(PreprocessorParser.ALTER, 5, "alter", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ALTERNATEKEY, 13, "alternate-key", TI.KEYWORD);
    add(PreprocessorParser.AMBIGUOUS, 5, "ambiguous", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.AMPANALYZERESUME, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.AMPANALYZESUSPEND, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.AMPELSE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.AMPELSEIF, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.AMPENDIF, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.AMPGLOBALDEFINE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.AMPIF, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.AMPMESSAGE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.AMPSCOPEDDEFINE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.AMPTHEN, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.AMPUNDEFINE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.ANALYZE, 6, "analyze", TI.KEYWORD);
    add(PreprocessorParser.AND, 3, "and", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ANNOTATION, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.ANSIONLY, 9, "ansi-only", TI.KEYWORD);
    add(PreprocessorParser.ANY, 3, "any", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ANYWHERE, 8, "anywhere", TI.KEYWORD);
    add(PreprocessorParser.APPEND, 6, "append", TI.KEYWORD);
    add(PreprocessorParser.APPLICATION, 11, "application", TI.KEYWORD);
    add(PreprocessorParser.APPLY, 5, "apply", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ARRAYMESSAGE, 7, "array-message", TI.KEYWORD);
    add(PreprocessorParser.AS, 2, "as", TI.KEYWORD);
    add(PreprocessorParser.ASC, 3, "asc", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ASCENDING, 4, "ascending", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ASKOVERWRITE, 13, "ask-overwrite", TI.KEYWORD);
    add(PreprocessorParser.ASSEMBLY, 8, "assembly", TI.KEYWORD);
    add(PreprocessorParser.ASSIGN, 6, "assign", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.Assign_dynamic_new, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.ASYNCHRONOUS, 12, "asynchronous", TI.KEYWORD);
    add(PreprocessorParser.AT, 2, "at", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ATTACHMENT, 6, "attachment", TI.KEYWORD);
    add(PreprocessorParser.ATTRSPACE, 4, "attr-space", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.AUDITCONTROL, 13, "audit-control", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.AUDITENABLED, 13, "audit-enabled", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.AUDITPOLICY, 12, "audit-policy", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.AUTHORIZATION, 13, "authorization", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.AUTOCOMPLETION, 9, "auto-completion", TI.KEYWORD);
    add(PreprocessorParser.AUTOENDKEY, 12, "auto-end-key", TI.KEYWORD);
    add(PreprocessorParser.AUTOENDKEY, 11, "auto-endkey", TI.EXTRA_LITERAL);
    add(PreprocessorParser.AUTOGO, 7, "auto-go", TI.KEYWORD);
    add(PreprocessorParser.AUTOMATIC, 9, "automatic", TI.KEYWORD);
    add(PreprocessorParser.AUTORETURN, 8, "auto-return", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.AVAILABLE, 5, "available", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.AVERAGE, 3, "average", TI.KEYWORD);
    add(PreprocessorParser.AVG, 3, "avg", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.Aggregate_phrase, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Array_subscript, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Assign_from_buffer, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Automationobject, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.BACKGROUND, 4, "background", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.BACKSLASH, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.BACKTICK, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.BACKWARDS, 8, "backwards", TI.KEYWORD);
    add(PreprocessorParser.BASE64, 6, "base64", TI.KEYWORD);
    add(PreprocessorParser.BASE64DECODE, 13, "base64-decode", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.BASE64ENCODE, 13, "base64-encode", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.BASEKEY, 8, "base-key", TI.KEYWORD);
    add(PreprocessorParser.BATCHSIZE, 10, "batch-size", TI.KEYWORD);
    add(PreprocessorParser.BEFOREHIDE, 8, "before-hide", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.BEFORETABLE, 12, "before-table", TI.KEYWORD);
    add(PreprocessorParser.BEGINS, 6, "begins", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.BELL, 4, "bell", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.BETWEEN, 7, "between", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.BGCOLOR, 3, "bgcolor", TI.KEYWORD);
    add(PreprocessorParser.BIGENDIAN, 10, "big-endian", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.BIGINT, 6, "bigint", TI.KEYWORD);
    add(PreprocessorParser.BINARY, 6, "binary", TI.KEYWORD);
    add(PreprocessorParser.BIND, 4, "bind", TI.KEYWORD);
    add(PreprocessorParser.BINDWHERE, 10, "bind-where", TI.KEYWORD);
    add(PreprocessorParser.BLANK, 5, "blank", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.BLOB, 4, "blob", TI.KEYWORD);
    add(PreprocessorParser.BLOCK_LABEL, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.BLOCKLEVEL, 11, "block-level", TI.KEYWORD);
    add(PreprocessorParser.BOTH, 4, "both", TI.KEYWORD);
    add(PreprocessorParser.BOTTOM, 6, "bottom", TI.KEYWORD);
    add(PreprocessorParser.BOX, 3, "box", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.BREAK, 5, "break", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.BROWSE, 6, "browse", TI.KEYWORD);
    add(PreprocessorParser.BTOS, 4, "btos", TI.KEYWORD);
    add(PreprocessorParser.BUFFER, 6, "buffer", TI.KEYWORD);
    add(PreprocessorParser.BUFFERCHARS, 12, "buffer-chars", TI.KEYWORD);
    add(PreprocessorParser.BUFFERCOMPARE, 14, "buffer-compare", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.BUFFERCOPY, 11, "buffer-copy", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.BUFFERLINES, 12, "buffer-lines", TI.KEYWORD);
    add(PreprocessorParser.BUFFERNAME, 8, "buffer-name", TI.KEYWORD);
    add(PreprocessorParser.BUTTON, 6, "button", TI.KEYWORD);
    add(PreprocessorParser.BUTTONS, 7, "buttons", TI.KEYWORD);
    add(PreprocessorParser.BY, 2, "by", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.BYPOINTER, 10, "by-pointer", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.BYREFERENCE, 12, "by-reference", TI.KEYWORD);
    add(PreprocessorParser.BYTE, 4, "byte", TI.KEYWORD);
    add(PreprocessorParser.BYVALUE, 8, "by-value", TI.KEYWORD);
    add(PreprocessorParser.BYVARIANTPOINTER, 16, "by-variant-pointer", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.Block_iterator, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.CACHE, 5, "cache", TI.KEYWORD);
    add(PreprocessorParser.CACHESIZE, 10, "cache-size", TI.KEYWORD);
    add(PreprocessorParser.CALL, 4, "call", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.CANCELBUTTON, 13, "cancel-button", TI.KEYWORD);
    add(PreprocessorParser.CANDO, 6, "can-do", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.CANFIND, 8, "can-find", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.CANQUERY, 9, "can-query", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.CANSET, 7, "can-set", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.CAPS, 4, "caps", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.CAPS, 5, "upper", TI.EXTRA_LITERAL);
    add(PreprocessorParser.CARET, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.CASE, 4, "case", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.CASESENSITIVE, 8, "case-sensitive", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.CAST, 4, "cast", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.CATCH, 5, "catch", TI.KEYWORD);
    add(PreprocessorParser.CDECL_KW, 5, "cdecl", TI.KEYWORD);
    add(PreprocessorParser.CENTERED, 6, "centered", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.CHAINED, 7, "chained", TI.KEYWORD);
    add(PreprocessorParser.CHARACTER, 4, "character", TI.KEYWORD);
    add(PreprocessorParser.CHARACTERLENGTH, 15, "characterlength", TI.KEYWORD);
    add(PreprocessorParser.CHECK, 5, "check", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.CHOOSE, 6, "choose", TI.KEYWORD);
    add(PreprocessorParser.CHR, 3, "chr", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.CLASS, 5, "class", TI.KEYWORD);
    add(PreprocessorParser.CLEAR, 5, "clear", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.CLIENTPRINCIPAL, 16, "client-principal", TI.KEYWORD);
    add(PreprocessorParser.CLIPBOARD, 9, "clipboard", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.CLOB, 4, "clob", TI.KEYWORD);
    add(PreprocessorParser.CLOSE, 5, "close", TI.KEYWORD);
    add(PreprocessorParser.CODEBASELOCATOR, 16, "codebase-locator", TI.KEYWORD | TI.SYSHDL);
    add(PreprocessorParser.CODEPAGE, 8, "codepage", TI.KEYWORD);
    add(PreprocessorParser.CODEPAGECONVERT, 16, "codepage-convert", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.COLLATE, 7, "collate", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.COLOF, 6, "col-of", TI.KEYWORD);
    add(PreprocessorParser.COLON, 5, "colon", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.COLONALIGNED, 11, "colon-aligned", TI.KEYWORD);
    add(PreprocessorParser.COLOR, 5, "color", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.COLORTABLE, 11, "color-table", TI.KEYWORD | TI.SYSHDL);
    add(PreprocessorParser.COLUMN, 3, "column", TI.KEYWORD);
    add(PreprocessorParser.COLUMNBGCOLOR, 10, "column-bgcolor", TI.KEYWORD);
    add(PreprocessorParser.COLUMNCODEPAGE, 15, "column-codepage", TI.KEYWORD);
    add(PreprocessorParser.COLUMNDCOLOR, 13, "column-dcolor", TI.KEYWORD);
    add(PreprocessorParser.COLUMNFGCOLOR, 10, "column-fgcolor", TI.KEYWORD);
    add(PreprocessorParser.COLUMNFONT, 11, "column-font", TI.KEYWORD);
    add(PreprocessorParser.COLUMNLABEL, 10, "column-label", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.COLUMNOF, 9, "column-of", TI.KEYWORD);
    add(PreprocessorParser.COLUMNPFCOLOR, 10, "column-pfcolor", TI.KEYWORD);
    add(PreprocessorParser.COLUMNS, 7, "columns", TI.KEYWORD);
    add(PreprocessorParser.COMBOBOX, 9, "combo-box", TI.KEYWORD);
    add(PreprocessorParser.COMHANDLE, 10, "com-handle", TI.KEYWORD);
    add(PreprocessorParser.COMHANDLE, 16, "component-handle", TI.EXTRA_LITERAL);
    add(PreprocessorParser.COMMA, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.COMMAND, 7, "command", TI.KEYWORD);
    add(PreprocessorParser.COMMENT, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.COMMENTEND, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.COMMENTSTART, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.COMPARE, 7, "compare", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.COMPARES, 8, "compares", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.COMPILE, 7, "compile", TI.KEYWORD);
    add(PreprocessorParser.COMPILER, 8, "compiler", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.COMPLETE, 8, "complete", TI.KEYWORD);
    add(PreprocessorParser.COMSELF, 8, "com-self", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.CONFIGNAME, 11, "config-name", TI.KEYWORD);
    add(PreprocessorParser.CONNECT, 7, "connect", TI.KEYWORD);
    add(PreprocessorParser.CONNECTED, 9, "connected", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.CONSTRUCTOR, 11, "constructor", TI.KEYWORD);
    add(PreprocessorParser.CONTAINS, 8, "contains", TI.KEYWORD);
    add(PreprocessorParser.CONTENTS, 8, "contents", TI.KEYWORD);
    add(PreprocessorParser.CONTEXT, 7, "context", TI.KEYWORD);
    add(PreprocessorParser.CONTEXTHELP, 12, "context-help", TI.KEYWORD);
    add(PreprocessorParser.CONTEXTHELPFILE, 17, "context-help-file", TI.KEYWORD);
    add(PreprocessorParser.CONTEXTHELPID, 15, "context-help-id", TI.KEYWORD);
    add(PreprocessorParser.CONTEXTPOPUP, 11, "context-popup", TI.KEYWORD);
    add(PreprocessorParser.CONTROL, 7, "control", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.CONTROLFRAME, 13, "control-frame", TI.KEYWORD);
    add(PreprocessorParser.CONVERT, 7, "convert", TI.KEYWORD);
    add(PreprocessorParser.CONVERT3DCOLORS, 10, "convert-3d-colors", TI.KEYWORD);
    add(PreprocessorParser.COPYDATASET, 12, "copy-dataset", TI.KEYWORD);
    add(PreprocessorParser.COPYLOB, 8, "copy-lob", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.COPYTEMPTABLE, 15, "copy-temp-table", TI.KEYWORD);
    add(PreprocessorParser.COUNT, 5, "count", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.COUNTOF, 8, "count-of", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.CREATE, 6, "create", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.CREATELIKESEQUENTIAL, 22, "create-like-sequential", TI.KEYWORD);
    add(PreprocessorParser.CREATETESTFILE, 16, "create-test-file", TI.KEYWORD);
    add(PreprocessorParser.CURLYAMP, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.CURLYNUMBER, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.CURLYSTAR, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.CURRENCY, 8, "currency", TI.KEYWORD);
    add(PreprocessorParser.CURRENT, 7, "current", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.CURRENTCHANGED, 15, "current-changed", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.CURRENTENVIRONMENT, 11, "current-environment", TI.KEYWORD);
    add(PreprocessorParser.CURRENTLANGUAGE, 12, "current-language", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.CURRENTQUERY, 13, "current-query", TI.KEYWORD);
    add(PreprocessorParser.CURRENTRESULTROW, 18, "current-result-row", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.CURRENTVALUE, 13, "current-value", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.CURRENTWINDOW, 14, "current-window", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.CURSOR, 4, "cursor", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.Code_block, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.DATABASE, 8, "database", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DATABIND, 6, "data-bind", TI.KEYWORD);
    add(PreprocessorParser.DATARELATION, 13, "data-relation", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DATASERVERS, 11, "dataservers", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.DATASERVERS, 7, "gateways", TI.EXTRA_LITERAL);
    add(PreprocessorParser.DATASET, 7, "dataset", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DATASETHANDLE, 14, "dataset-handle", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DATASOURCE, 11, "data-source", TI.KEYWORD);
    add(PreprocessorParser.DATASOURCEMODIFIED, 20, "data-source-modified", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DATASOURCEROWID, 17, "data-source-rowid", TI.KEYWORD);
    add(PreprocessorParser.DATE, 4, "date", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DATETIME, 8, "datetime", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DATETIMETZ, 11, "datetime-tz", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DAY, 3, "day", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DBCODEPAGE, 10, "dbcodepage", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DBCOLLATION, 11, "dbcollation", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DBIMS, 5, "dbims", TI.KEYWORD);
    add(PreprocessorParser.DBNAME, 6, "dbname", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.DBPARAM, 7, "dbparam", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DBREMOTEHOST, 14, "db-remote-host", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DBRESTRICTIONS, 6, "dbrestrictions", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DBTASKID, 8, "dbtaskid", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DBTYPE, 6, "dbtype", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DBVERSION, 6, "dbversion", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DCOLOR, 6, "dcolor", TI.KEYWORD);
    add(PreprocessorParser.DDE, 3, "dde", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DEBLANK, 7, "deblank", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DEBUG, 4, "debug", TI.KEYWORD);
    add(PreprocessorParser.DEBUGGER, 8, "debugger", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.DEBUGLIST, 10, "debug-list", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DECIMAL, 3, "decimal", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DECIMALS, 8, "decimals", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DECLARE, 7, "declare", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DECRYPT, 7, "decrypt", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DEFAULT, 7, "default", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DEFAULTBUTTON, 8, "default-button", TI.KEYWORD);
    add(PreprocessorParser.DEFAULTEXTENSION, 10, "default-extension", TI.KEYWORD);
    add(PreprocessorParser.DEFAULTNOXLATE, 12, "default-noxlate", TI.KEYWORD);
    add(PreprocessorParser.DEFAULTVALUE, 13, "default-value", TI.KEYWORD);
    add(PreprocessorParser.DEFAULTWINDOW, 14, "default-window", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.DEFERLOBFETCH, 15, "defer-lob-fetch", TI.KEYWORD);
    add(PreprocessorParser.DEFINE, 3, "define", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DEFINED, 7, "defined", TI.KEYWORD);
    add(PreprocessorParser.DEFINETEXT, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.DELEGATE, 8, "delegate", TI.KEYWORD);
    add(PreprocessorParser.DELETECHARACTER, 11, "delete-character", TI.KEYWORD);
    add(PreprocessorParser.DELETERESULTLISTENTRY, 24, "delete-result-list-entry", TI.KEYWORD);
    add(PreprocessorParser.DELETE_KW, 6, "delete", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DELIMITER, 9, "delimiter", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DESCENDING, 4, "descending", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DESELECTION, 11, "deselection", TI.KEYWORD);
    add(PreprocessorParser.DESTRUCTOR, 10, "destructor", TI.KEYWORD);
    add(PreprocessorParser.DIALOGBOX, 10, "dialog-box", TI.KEYWORD);
    add(PreprocessorParser.DIALOGHELP, 11, "dialog-help", TI.KEYWORD);
    add(PreprocessorParser.DICTIONARY, 4, "dictionary", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DIGITS, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.DIGITSTART, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.DIR, 3, "dir", TI.KEYWORD);
    add(PreprocessorParser.DISABLE, 7, "disable", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DISABLEAUTOZAP, 16, "disable-auto-zap", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DISABLED, 8, "disabled", TI.KEYWORD);
    add(PreprocessorParser.DISCONNECT, 6, "disconnect", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DISPLAY, 4, "display", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DISTINCT, 8, "distinct", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DIVIDE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.DO, 2, "do", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DOS, 3, "dos", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DOT_COMMENT, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.DOUBLE, 6, "double", TI.KEYWORD);
    add(PreprocessorParser.DOUBLECOLON, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.DOUBLEQUOTE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.DOWN, 4, "down", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DQSTRING, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.DROP, 4, "drop", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.DROPDOWN, 9, "drop-down", TI.KEYWORD);
    add(PreprocessorParser.DROPDOWNLIST, 14, "drop-down-list", TI.KEYWORD);
    add(PreprocessorParser.DROPFILENOTIFY, 16, "drop-file-notify", TI.KEYWORD);
    add(PreprocessorParser.DROPTARGET, 11, "drop-target", TI.KEYWORD);
    add(PreprocessorParser.DUMP, 4, "dump", TI.KEYWORD);
    add(PreprocessorParser.DYNAMIC, 7, "dynamic", TI.KEYWORD);
    add(PreprocessorParser.DYNAMICCAST, 12, "dynamic-cast", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DYNAMICCURRENTVALUE, 21, "dynamic-current-value", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DYNAMICFUNCTION, 12, "dynamic-function", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DYNAMICINVOKE, 14, "dynamic-invoke", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.DYNAMICNEW, 11, "dynamic-new", TI.KEYWORD);
    add(PreprocessorParser.DYNAMICNEXTVALUE, 18, "dynamic-next-value", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.EACH, 4, "each", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ECHO, 4, "echo", TI.KEYWORD);
    add(PreprocessorParser.EDGECHARS, 4, "edge-chars", TI.KEYWORD);
    add(PreprocessorParser.EDGEPIXELS, 6, "edge-pixels", TI.KEYWORD);
    add(PreprocessorParser.EDITING, 7, "editing", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.EDITOR, 6, "editor", TI.KEYWORD);
    add(PreprocessorParser.EDITUNDO, 9, "edit-undo", TI.KEYWORD);
    add(PreprocessorParser.ELSE, 4, "else", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.EMPTY, 5, "empty", TI.KEYWORD);
    add(PreprocessorParser.ENABLE, 6, "enable", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ENABLEDFIELDS, 14, "enabled-fields", TI.KEYWORD);
    add(PreprocessorParser.ENCODE, 6, "encode", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ENCRYPT, 7, "encrypt", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ENCRYPTIONSALT, 15, "encryption-salt", TI.KEYWORD);
    add(PreprocessorParser.END, 3, "end", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ENDKEY, 7, "end-key", TI.KEYWORD);
    add(PreprocessorParser.ENDKEY, 6, "endkey", TI.EXTRA_LITERAL);
    add(PreprocessorParser.ENDMOVE, 8, "end-move", TI.KEYWORD);
    add(PreprocessorParser.ENDRESIZE, 10, "end-resize", TI.KEYWORD);
    add(PreprocessorParser.ENDROWRESIZE, 14, "end-row-resize", TI.KEYWORD);
    add(PreprocessorParser.ENTERED, 7, "entered", TI.KEYWORD);
    add(PreprocessorParser.ENTRY, 5, "entry", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ENUM, 4, "enum", TI.KEYWORD);
    add(PreprocessorParser.EQ, 2, "eq", TI.KEYWORD);
    add(PreprocessorParser.EQUAL, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.ERROR, 5, "error", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ERRORCODE, 10, "error-code", TI.KEYWORD);
    add(PreprocessorParser.ERRORSTACKTRACE, 17, "error-stack-trace", TI.KEYWORD);
    add(PreprocessorParser.ERRORSTATUS, 10, "error-status", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.ESCAPE, 6, "escape", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ESCAPED_QUOTE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.ETIME_KW, 5, "etime", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.EVENT, 5, "event", TI.KEYWORD);
    add(PreprocessorParser.EVENTPROCEDURE, 15, "event-procedure", TI.KEYWORD);
    add(PreprocessorParser.EVENTS, 6, "events", TI.KEYWORD);
    add(PreprocessorParser.EXCEPT, 6, "except", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.EXCLAMATION, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.EXCLUSIVEID, 12, "exclusive-id", TI.KEYWORD);
    add(PreprocessorParser.EXCLUSIVELOCK, 9, "exclusive-lock", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.EXCLUSIVEWEBUSER, 13, "exclusive-web-user", TI.KEYWORD);
    add(PreprocessorParser.EXECUTE, 7, "execute", TI.KEYWORD);
    add(PreprocessorParser.EXISTS, 6, "exists", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.EXP, 3, "exp", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.EXPAND, 6, "expand", TI.KEYWORD);
    add(PreprocessorParser.EXPANDABLE, 10, "expandable", TI.KEYWORD);
    add(PreprocessorParser.EXPLICIT, 8, "explicit", TI.KEYWORD);
    add(PreprocessorParser.EXPORT, 6, "export", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.EXTENDED, 8, "extended", TI.KEYWORD);
    add(PreprocessorParser.EXTENT, 6, "extent", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.EXTERNAL, 8, "external", TI.KEYWORD);
    add(PreprocessorParser.Editing_phrase, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Entered_func, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Event_list, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Expr_statement, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.FALSELEAKS, 11, "false-leaks", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FALSE_KW, 5, "false", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FETCH, 5, "fetch", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FGCOLOR, 3, "fgcolor", TI.KEYWORD);
    add(PreprocessorParser.FIELD, 5, "field", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FIELDS, 6, "fields", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FILE, 4, "file", TI.KEYWORD);
    add(PreprocessorParser.FILE, 9, "file-name", TI.EXTRA_LITERAL);
    add(PreprocessorParser.FILE, 8, "filename", TI.EXTRA_LITERAL);
    add(PreprocessorParser.FILEINFORMATION, 9, "file-information", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.FILENAME, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.FILL, 4, "fill", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.FILLIN, 7, "fill-in", TI.KEYWORD);
    add(PreprocessorParser.FILTERS, 7, "filters", TI.KEYWORD);
    add(PreprocessorParser.FINAL, 5, "final", TI.KEYWORD);
    add(PreprocessorParser.FINALLY, 7, "finally", TI.KEYWORD);
    add(PreprocessorParser.FIND, 4, "find", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FINDCASESENSITIVE, 19, "find-case-sensitive", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FINDER, 6, "finder", TI.KEYWORD);
    add(PreprocessorParser.FINDGLOBAL, 11, "find-global", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FINDNEXTOCCURRENCE, 20, "find-next-occurrence", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FINDPREVOCCURRENCE, 20, "find-prev-occurrence", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FINDSELECT, 11, "find-select", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FINDWRAPAROUND, 16, "find-wrap-around", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FIRST, 5, "first", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.FIRSTFORM, 10, "first-form", TI.KEYWORD);
    add(PreprocessorParser.FIRSTOF, 8, "first-of", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.FITLASTCOLUMN, 15, "fit-last-column", TI.KEYWORD);
    add(PreprocessorParser.FIXCHAR, 7, "fixchar", TI.KEYWORD);
    add(PreprocessorParser.FIXCODEPAGE, 12, "fix-codepage", TI.KEYWORD);
    add(PreprocessorParser.FIXEDONLY, 10, "fixed-only", TI.KEYWORD);
    add(PreprocessorParser.FLAGS, 5, "flags", TI.KEYWORD);
    add(PreprocessorParser.FLATBUTTON, 11, "flat-button", TI.KEYWORD);
    add(PreprocessorParser.FLOAT, 5, "float", TI.KEYWORD);
    add(PreprocessorParser.FOCUS, 5, "focus", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.FONT, 4, "font", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FONTBASEDLAYOUT, 17, "font-based-layout", TI.KEYWORD);
    add(PreprocessorParser.FONTTABLE, 10, "font-table", TI.KEYWORD | TI.SYSHDL);
    add(PreprocessorParser.FOR, 3, "for", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FORCEFILE, 10, "force-file", TI.KEYWORD);
    add(PreprocessorParser.FOREIGNKEYHIDDEN, 18, "foreign-key-hidden", TI.KEYWORD);
    add(PreprocessorParser.FORMAT, 4, "format", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FORMINPUT, 9, "forminput", TI.KEYWORD);
    add(PreprocessorParser.FORMLONGINPUT, 15, "form-long-input", TI.KEYWORD);
    add(PreprocessorParser.FORWARDS, 7, "forwards", TI.KEYWORD);
    add(PreprocessorParser.FRAME, 4, "frame", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FRAMECOL, 9, "frame-col", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.FRAMEDB, 8, "frame-db", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.FRAMEDOWN, 10, "frame-down", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.FRAMEFIELD, 11, "frame-field", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.FRAMEFILE, 10, "frame-file", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.FRAMEINDEX, 10, "frame-index", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.FRAMELINE, 10, "frame-line", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.FRAMENAME, 10, "frame-name", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.FRAMEROW, 9, "frame-row", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.FRAMEVALUE, 9, "frame-value", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.FREECHAR, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.FREQUENCY, 9, "frequency", TI.KEYWORD);
    add(PreprocessorParser.FROM, 4, "from", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.FROMCURRENT, 8, "from-current", TI.KEYWORD);
    add(PreprocessorParser.FUNCTION, 8, "function", TI.KEYWORD);
    add(PreprocessorParser.FUNCTIONCALLTYPE, 18, "function-call-type", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.Field_list, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Field_ref, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Form_item, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Format_phrase, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.GATEWAYS, 0, "", TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.GE, 2, "ge", TI.KEYWORD);
    add(PreprocessorParser.GENERATEMD5, 12, "generate-md5", TI.KEYWORD);
    add(PreprocessorParser.GENERATEPBEKEY, 16, "generate-pbe-key", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GENERATEPBESALT, 17, "generate-pbe-salt", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.GENERATERANDOMKEY, 19, "generate-random-key", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.GENERATEUUID, 13, "generate-uuid", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.GET, 3, "get", TI.KEYWORD);
    add(PreprocessorParser.GETATTRCALLTYPE, 18, "get-attr-call-type", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.GETBITS, 8, "get-bits", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETBUFFERHANDLE, 17, "get-buffer-handle", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.GETBYTE, 8, "get-byte", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETBYTE, 7, "getbyte", TI.EXTRA_LITERAL);
    add(PreprocessorParser.GETBYTEORDER, 14, "get-byte-order", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETBYTES, 9, "get-bytes", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETCGILIST, 12, "get-cgi-list", TI.KEYWORD);
    add(PreprocessorParser.GETCGILONGVALUE, 18, "get-cgi-long-value", TI.KEYWORD);
    add(PreprocessorParser.GETCGIVALUE, 13, "get-cgi-value", TI.KEYWORD);
    add(PreprocessorParser.GETCLASS, 9, "get-class", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETCODEPAGE, 12, "get-codepage", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETCODEPAGES, 13, "get-codepages", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETCOLLATIONS, 8, "get-collations", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETCONFIGVALUE, 16, "get-config-value", TI.KEYWORD);
    add(PreprocessorParser.GETDIR, 7, "get-dir", TI.KEYWORD);
    add(PreprocessorParser.GETDOUBLE, 10, "get-double", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETFILE, 8, "get-file", TI.KEYWORD);
    add(PreprocessorParser.GETFLOAT, 9, "get-float", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETINT64, 9, "get-int64", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETKEYVALUE, 11, "get-key-value", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.GETLICENSE, 11, "get-license", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETLONG, 8, "get-long", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETPOINTERVALUE, 17, "get-pointer-value", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETSHORT, 9, "get-short", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETSIZE, 8, "get-size", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETSTRING, 10, "get-string", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETUNSIGNEDLONG, 17, "get-unsigned-long", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GETUNSIGNEDSHORT, 18, "get-unsigned-short", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.GLOBAL, 6, "global", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.GLOBALDEFINE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.GOON, 5, "go-on", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.GOPENDING, 7, "go-pending", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.GRANT, 5, "grant", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.GRAPHICEDGE, 9, "graphic-edge", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.GROUP, 5, "group", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.GROUPBOX, 9, "group-box", TI.KEYWORD);
    add(PreprocessorParser.GTHAN, 2, "gt", TI.KEYWORD);
    add(PreprocessorParser.GTOREQUAL, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.GTORLT, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.GUID, 4, "guid", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.HANDLE, 6, "handle", TI.KEYWORD);
    add(PreprocessorParser.HAVING, 6, "having", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.HEADER, 6, "header", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.HEIGHT, 6, "height", TI.KEYWORD);
    add(PreprocessorParser.HEIGHTCHARS, 8, "height-chars", TI.KEYWORD);
    add(PreprocessorParser.HEIGHTPIXELS, 8, "height-pixels", TI.KEYWORD);
    add(PreprocessorParser.HELP, 4, "help", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.HELPTOPIC, 10, "help-topic", TI.KEYWORD);
    add(PreprocessorParser.HEXDECODE, 10, "hex-decode", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.HEXENCODE, 10, "hex-encode", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.HIDE, 4, "hide", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.HINT, 4, "hint", TI.KEYWORD);
    add(PreprocessorParser.HORIZONTAL, 4, "horizontal", TI.KEYWORD);
    add(PreprocessorParser.HOSTBYTEORDER, 15, "host-byte-order", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.HTMLENDOFLINE, 16, "html-end-of-line", TI.KEYWORD);
    add(PreprocessorParser.HTMLFRAMEBEGIN, 16, "html-frame-begin", TI.KEYWORD);
    add(PreprocessorParser.HTMLFRAMEEND, 14, "html-frame-end", TI.KEYWORD);
    add(PreprocessorParser.HTMLHEADERBEGIN, 17, "html-header-begin", TI.KEYWORD);
    add(PreprocessorParser.HTMLHEADEREND, 15, "html-header-end", TI.KEYWORD);
    add(PreprocessorParser.HTMLTITLEBEGIN, 16, "html-title-begin", TI.KEYWORD);
    add(PreprocessorParser.HTMLTITLEEND, 14, "html-title-end", TI.KEYWORD);
    add(PreprocessorParser.ID, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.ID_THREE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.ID_TWO, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.IF, 2, "if", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.IFCOND, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.IMAGE, 5, "image", TI.KEYWORD);
    add(PreprocessorParser.IMAGEDOWN, 10, "image-down", TI.KEYWORD);
    add(PreprocessorParser.IMAGEINSENSITIVE, 17, "image-insensitive", TI.KEYWORD);
    add(PreprocessorParser.IMAGESIZE, 10, "image-size", TI.KEYWORD);
    add(PreprocessorParser.IMAGESIZECHARS, 12, "image-size-chars", TI.KEYWORD);
    add(PreprocessorParser.IMAGESIZEPIXELS, 12, "image-size-pixels", TI.KEYWORD);
    add(PreprocessorParser.IMAGEUP, 8, "image-up", TI.KEYWORD);
    add(PreprocessorParser.IMPLEMENTS, 10, "implements", TI.KEYWORD);
    add(PreprocessorParser.IMPORT, 6, "import", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.IMPOSSIBLE_TOKEN, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.INCLUDEREFARG, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.INCREMENTEXCLUSIVEID, 22, "increment-exclusive-id", TI.KEYWORD);
    add(PreprocessorParser.INDEX, 5, "index", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.INDEXEDREPOSITION, 18, "indexed-reposition", TI.KEYWORD);
    add(PreprocessorParser.INDEXHINT, 10, "index-hint", TI.KEYWORD);
    add(PreprocessorParser.INDICATOR, 9, "indicator", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.INFORMATION, 4, "information", TI.KEYWORD);
    add(PreprocessorParser.INHERITBGCOLOR, 11, "inherit-bgcolor", TI.KEYWORD);
    add(PreprocessorParser.INHERITFGCOLOR, 11, "inherit-fgcolor", TI.KEYWORD);
    add(PreprocessorParser.INHERITS, 8, "inherits", TI.KEYWORD);
    add(PreprocessorParser.INITIAL, 4, "initial", TI.KEYWORD);
    add(PreprocessorParser.INITIALDIR, 11, "initial-dir", TI.KEYWORD);
    add(PreprocessorParser.INITIALFILTER, 14, "initial-filter", TI.KEYWORD);
    add(PreprocessorParser.INITIATE, 8, "initiate", TI.KEYWORD);
    add(PreprocessorParser.INNER, 5, "inner", TI.KEYWORD);
    add(PreprocessorParser.INNERCHARS, 11, "inner-chars", TI.KEYWORD);
    add(PreprocessorParser.INNERLINES, 11, "inner-lines", TI.KEYWORD);
    add(PreprocessorParser.INPUT, 5, "input", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.INPUTOUTPUT, 7, "input-output", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.INSERT, 6, "insert", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.INT64, 5, "int64", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.INTEGER, 3, "integer", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.INTERFACE, 9, "interface", TI.KEYWORD);
    add(PreprocessorParser.INTERVAL, 8, "interval", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.INTO, 4, "into", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.IN_KW, 2, "in", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.IS, 2, "is", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ISATTRSPACE, 7, "is-attr-space", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.ISCODEPAGEFIXED, 17, "is-codepage-fixed", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ISCOLUMNCODEPAGE, 18, "is-column-codepage", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ISLEADBYTE, 7, "is-lead-byte", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ISODATE, 8, "iso-date", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ITEM, 4, "item", TI.KEYWORD);
    add(PreprocessorParser.IUNKNOWN, 8, "iunknown", TI.KEYWORD);
    add(PreprocessorParser.Inline_definition, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.JOIN, 4, "join", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.JOINBYSQLDB, 13, "join-by-sqldb", TI.KEYWORD);
    add(PreprocessorParser.KBLABEL, 7, "kblabel", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.KEEPMESSAGES, 13, "keep-messages", TI.KEYWORD);
    add(PreprocessorParser.KEEPTABORDER, 14, "keep-tab-order", TI.KEYWORD);
    add(PreprocessorParser.KEY, 3, "key", TI.KEYWORD);
    add(PreprocessorParser.KEYCODE, 8, "key-code", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.KEYCODE, 7, "keycode", TI.EXTRA_LITERAL);
    add(PreprocessorParser.KEYFUNCTION, 8, "key-function", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.KEYFUNCTION, 7, "keyfunction", TI.EXTRA_LITERAL);
    add(PreprocessorParser.KEYLABEL, 9, "key-label", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.KEYLABEL, 8, "keylabel", TI.EXTRA_LITERAL);
    add(PreprocessorParser.KEYS, 4, "keys", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.KEYWORD, 7, "keyword", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.KEYWORDALL, 11, "keyword-all", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LABEL, 5, "label", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.LABELBGCOLOR, 9, "label-bgcolor", TI.KEYWORD);
    add(PreprocessorParser.LABELDCOLOR, 8, "label-dcolor", TI.KEYWORD);
    add(PreprocessorParser.LABELFGCOLOR, 9, "label-fgcolor", TI.KEYWORD);
    add(PreprocessorParser.LABELFONT, 10, "label-font", TI.KEYWORD);
    add(PreprocessorParser.LANDSCAPE, 9, "landscape", TI.KEYWORD);
    add(PreprocessorParser.LANGUAGES, 8, "languages", TI.KEYWORD);
    add(PreprocessorParser.LARGE, 5, "large", TI.KEYWORD);
    add(PreprocessorParser.LARGETOSMALL, 14, "large-to-small", TI.KEYWORD);
    add(PreprocessorParser.LAST, 4, "last", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LASTBATCH, 10, "last-batch", TI.KEYWORD);
    add(PreprocessorParser.LASTEVENT, 9, "last-event", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.LASTFORM, 9, "last-form", TI.KEYWORD);
    add(PreprocessorParser.LASTKEY, 8, "last-key", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.LASTKEY, 7, "lastkey", TI.EXTRA_LITERAL);
    add(PreprocessorParser.LASTOF, 7, "last-of", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LC, 2, "lc", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LC, 5, "lower", TI.EXTRA_LITERAL);
    add(PreprocessorParser.LDBNAME, 7, "ldbname", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LE, 2, "le", TI.KEYWORD);
    add(PreprocessorParser.LEAKDETECTION, 14, "leak-detection", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.LEAVE, 5, "leave", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.LEFT, 4, "left", TI.KEYWORD);
    add(PreprocessorParser.LEFTALIGNED, 10, "left-aligned", TI.KEYWORD);
    add(PreprocessorParser.LEFTANGLE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.LEFTBRACE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.LEFTCURLY, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.LEFTPAREN, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.LEFTTRIM, 9, "left-trim", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LENGTH, 6, "length", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LEXAT, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.LEXCOLON, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.LEXDATE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.LEXOTHER, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.LIBRARY, 7, "library", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LIKE, 4, "like", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.LIKESEQUENTIAL, 15, "like-sequential", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.LINECOUNTER, 10, "line-counter", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LISTEVENTS, 11, "list-events", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LISTING, 5, "listing", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.LISTITEMPAIRS, 15, "list-item-pairs", TI.KEYWORD);
    add(PreprocessorParser.LISTITEMS, 10, "list-items", TI.KEYWORD);
    add(PreprocessorParser.LISTQUERYATTRS, 16, "list-query-attrs", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LISTSETATTRS, 14, "list-set-attrs", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LISTWIDGETS, 12, "list-widgets", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LITTLEENDIAN, 13, "little-endian", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.LOAD, 4, "load", TI.KEYWORD);
    add(PreprocessorParser.LOADPICTURE, 12, "load-picture", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LOBDIR, 7, "lob-dir", TI.KEYWORD);
    add(PreprocessorParser.LOCAL_METHOD_REF, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.LOCKED, 6, "locked", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LOG, 3, "log", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LOGICAL, 7, "logical", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LOGMANAGER, 11, "log-manager", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.LONG, 4, "long", TI.KEYWORD);
    add(PreprocessorParser.LONGCHAR, 8, "longchar", TI.KEYWORD);
    add(PreprocessorParser.LOOKAHEAD, 9, "lookahead", TI.KEYWORD);
    add(PreprocessorParser.LOOKUP, 6, "lookup", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.LTHAN, 2, "lt", TI.KEYWORD);
    add(PreprocessorParser.LTOREQUAL, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Last_Token_Number, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Loose_End_Keeper, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.MACHINECLASS, 13, "machine-class", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.MAP, 3, "map", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.MARGINEXTRA, 12, "margin-extra", TI.KEYWORD);
    add(PreprocessorParser.MARKNEW, 8, "mark-new", TI.KEYWORD);
    add(PreprocessorParser.MARKROWSTATE, 14, "mark-row-state", TI.KEYWORD);
    add(PreprocessorParser.MATCHES, 7, "matches", TI.KEYWORD);
    add(PreprocessorParser.MAXCHARS, 9, "max-chars", TI.KEYWORD);
    add(PreprocessorParser.MAXIMIZE, 8, "maximize", TI.KEYWORD);
    add(PreprocessorParser.MAXIMUM, 3, "max", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.MAXIMUM, 7, "maximum", TI.EXTRA_LITERAL);
    add(PreprocessorParser.MAXIMUMLEVEL, 13, "maximum-level", TI.KEYWORD);
    add(PreprocessorParser.MAXROWS, 8, "max-rows", TI.KEYWORD);
    add(PreprocessorParser.MAXSIZE, 8, "max-size", TI.KEYWORD);
    add(PreprocessorParser.MAXVALUE, 7, "max-value", TI.KEYWORD);
    add(PreprocessorParser.MD5DIGEST, 10, "md5-digest", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.MEMBER, 6, "member", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.MEMPTR, 6, "memptr", TI.KEYWORD);
    add(PreprocessorParser.MENU, 4, "menu", TI.KEYWORD);
    add(PreprocessorParser.MENUBAR, 8, "menu-bar", TI.KEYWORD);
    add(PreprocessorParser.MENUBAR, 7, "menubar", TI.EXTRA_LITERAL);
    add(PreprocessorParser.MENUITEM, 9, "menu-item", TI.KEYWORD);
    add(PreprocessorParser.MERGEBYFIELD, 14, "merge-by-field", TI.KEYWORD);
    add(PreprocessorParser.MESSAGE, 7, "message", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.MESSAGEDIGEST, 14, "message-digest", TI.KEYWORD);
    add(PreprocessorParser.MESSAGELINE, 12, "message-line", TI.KEYWORD);
    add(PreprocessorParser.MESSAGELINES, 13, "message-lines", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.METHOD, 6, "method", TI.KEYWORD);
    add(PreprocessorParser.MINIMUM, 3, "minimum", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.MINSIZE, 8, "min-size", TI.KEYWORD);
    add(PreprocessorParser.MINUS, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.MINVALUE, 7, "min-value", TI.KEYWORD);
    add(PreprocessorParser.MODULO, 3, "modulo", TI.KEYWORD);
    add(PreprocessorParser.MONTH, 5, "month", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.MOUSE, 5, "mouse", TI.KEYWORD | TI.SYSHDL);
    add(PreprocessorParser.MOUSEPOINTER, 7, "mouse-pointer", TI.KEYWORD);
    add(PreprocessorParser.MPE, 3, "mpe", TI.KEYWORD);
    add(PreprocessorParser.MTIME, 5, "mtime", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.MULTIPLE, 8, "multiple", TI.KEYWORD);
    add(PreprocessorParser.MULTIPLEKEY, 12, "multiple-key", TI.KEYWORD);
    add(PreprocessorParser.MULTIPLY, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.MUSTEXIST, 10, "must-exist", TI.KEYWORD);
    add(PreprocessorParser.Method_param_list, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Method_parameter, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.NAMEDOT, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.NAMESPACEPREFIX, 16, "namespace-prefix", TI.KEYWORD);
    add(PreprocessorParser.NAMESPACEURI, 13, "namespace-uri", TI.KEYWORD);
    add(PreprocessorParser.NATIVE, 6, "native", TI.KEYWORD);
    add(PreprocessorParser.NE, 2, "ne", TI.KEYWORD);
    add(PreprocessorParser.NESTED, 6, "nested", TI.KEYWORD);
    add(PreprocessorParser.NEW, 3, "new", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.NEWINSTANCE, 12, "new-instance", TI.KEYWORD);
    add(PreprocessorParser.NEWLINE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.NEXT, 4, "next", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NEXTPROMPT, 11, "next-prompt", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NEXTVALUE, 10, "next-value", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.NO, 2, "no", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOAPPLY, 8, "no-apply", TI.KEYWORD);
    add(PreprocessorParser.NOARRAYMESSAGE, 10, "no-array-message", TI.KEYWORD);
    add(PreprocessorParser.NOASSIGN, 9, "no-assign", TI.KEYWORD);
    add(PreprocessorParser.NOATTRLIST, 9, "no-attr-list", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOATTRSPACE, 7, "no-attr-space", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOAUTOVALIDATE, 16, "no-auto-validate", TI.KEYWORD);
    add(PreprocessorParser.NOBINDWHERE, 13, "no-bind-where", TI.KEYWORD);
    add(PreprocessorParser.NOBOX, 6, "no-box", TI.KEYWORD);
    add(PreprocessorParser.NOCOLUMNSCROLLING, 12, "no-column-scrolling", TI.KEYWORD);
    add(PreprocessorParser.NOCONSOLE, 10, "no-console", TI.KEYWORD);
    add(PreprocessorParser.NOCONVERT, 10, "no-convert", TI.KEYWORD);
    add(PreprocessorParser.NOCONVERT3DCOLORS, 13, "no-convert-3d-colors", TI.KEYWORD);
    add(PreprocessorParser.NOCURRENTVALUE, 16, "no-current-value", TI.KEYWORD);
    add(PreprocessorParser.NODEBUG, 8, "no-debug", TI.KEYWORD);
    add(PreprocessorParser.NODRAG, 7, "no-drag", TI.KEYWORD);
    add(PreprocessorParser.NOECHO, 7, "no-echo", TI.KEYWORD);
    add(PreprocessorParser.NOEMPTYSPACE, 14, "no-empty-space", TI.KEYWORD);
    add(PreprocessorParser.NOERROR_KW, 8, "no-error", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOFILL, 4, "no-fill", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOFOCUS, 8, "no-focus", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOHELP, 7, "no-help", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOHIDE, 7, "no-hide", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOINDEXHINT, 13, "no-index-hint", TI.KEYWORD);
    add(PreprocessorParser.NOINHERITBGCOLOR, 14, "no-inherit-bgcolor", TI.KEYWORD);
    add(PreprocessorParser.NOINHERITFGCOLOR, 14, "no-inherit-fgcolor", TI.KEYWORD);
    add(PreprocessorParser.NOJOINBYSQLDB, 16, "no-join-by-sqldb", TI.KEYWORD);
    add(PreprocessorParser.NOLABELS, 8, "no-labels", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOLOBS, 7, "no-lobs", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOLOCK, 7, "no-lock", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOLOOKAHEAD, 12, "no-lookahead", TI.KEYWORD);
    add(PreprocessorParser.NOMAP, 6, "no-map", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOMESSAGE, 6, "no-message", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NONE, 4, "none", TI.KEYWORD);
    add(PreprocessorParser.NOPAUSE, 8, "no-pause", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOPREFETCH, 8, "no-prefetch", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NORETURNVALUE, 13, "no-return-value", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NORMAL, 6, "normal", TI.KEYWORD);
    add(PreprocessorParser.NORMALIZE, 9, "normalize", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.NOROWMARKERS, 14, "no-row-markers", TI.KEYWORD);
    add(PreprocessorParser.NOSCROLLBARVERTICAL, 14, "no-scrollbar-vertical", TI.KEYWORD);
    add(PreprocessorParser.NOSEPARATECONNECTION, 22, "no-separate-connection", TI.KEYWORD);
    add(PreprocessorParser.NOSEPARATORS, 13, "no-separators", TI.KEYWORD);
    add(PreprocessorParser.NOT, 3, "not", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOTACTIVE, 10, "not-active", TI.KEYWORD);
    add(PreprocessorParser.NOTABSTOP, 6, "no-tab-stop", TI.KEYWORD);
    add(PreprocessorParser.NOUNDERLINE, 6, "no-underline", TI.KEYWORD);
    add(PreprocessorParser.NOUNDO, 7, "no-undo", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOVALIDATE, 6, "no-validate", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOW, 3, "now", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.NOWAIT, 7, "no-wait", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NOWORDWRAP, 12, "no-word-wrap", TI.KEYWORD);
    add(PreprocessorParser.NULL_KW, 4, "null", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.NUMALIASES, 7, "num-aliases", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.NUMBER, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.NUMCOPIES, 10, "num-copies", TI.KEYWORD);
    add(PreprocessorParser.NUMDBS, 7, "num-dbs", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.NUMENTRIES, 11, "num-entries", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.NUMERIC, 7, "numeric", TI.KEYWORD);
    add(PreprocessorParser.NUMRESULTS, 11, "num-results", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.Not_casesens, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Not_null, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.OBJCOLON, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.OBJECT, 6, "object", TI.KEYWORD);
    add(PreprocessorParser.OCTETLENGTH, 12, "octet-length", TI.KEYWORD);
    add(PreprocessorParser.OF, 2, "of", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OFF, 3, "off", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OK, 2, "ok", TI.KEYWORD);
    add(PreprocessorParser.OKCANCEL, 9, "ok-cancel", TI.KEYWORD);
    add(PreprocessorParser.OLD, 3, "old", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ON, 2, "on", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ONLY, 4, "only", TI.KEYWORD);
    add(PreprocessorParser.OPEN, 4, "open", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OPSYS, 5, "opsys", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.OPTION, 6, "option", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OR, 2, "or", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ORDER, 5, "order", TI.KEYWORD);
    add(PreprocessorParser.ORDEREDJOIN, 12, "ordered-join", TI.KEYWORD);
    add(PreprocessorParser.ORDINAL, 7, "ordinal", TI.KEYWORD);
    add(PreprocessorParser.OS2, 3, "os2", TI.KEYWORD);
    add(PreprocessorParser.OS400, 5, "os400", TI.KEYWORD);
    add(PreprocessorParser.OSAPPEND, 9, "os-append", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OSCOMMAND, 10, "os-command", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OSCOPY, 7, "os-copy", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OSCREATEDIR, 13, "os-create-dir", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OSDELETE, 9, "os-delete", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OSDIR, 6, "os-dir", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OSDRIVES, 8, "os-drives", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.OSERROR, 8, "os-error", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.OSGETENV, 9, "os-getenv", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.OSRENAME, 9, "os-rename", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OTHERWISE, 9, "otherwise", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OUTER, 5, "outer", TI.KEYWORD);
    add(PreprocessorParser.OUTERJOIN, 10, "outer-join", TI.KEYWORD);
    add(PreprocessorParser.OUTPUT, 6, "output", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OVERLAY, 7, "overlay", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.OVERRIDE, 8, "override", TI.KEYWORD);
    add(PreprocessorParser.PAGE, 4, "page", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PAGEBOTTOM, 8, "page-bottom", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PAGED, 5, "paged", TI.KEYWORD);
    add(PreprocessorParser.PAGENUMBER, 8, "page-number", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.PAGESIZE_KW, 9, "page-size", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.PAGETOP, 8, "page-top", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PAGEWIDTH, 8, "page-width", TI.KEYWORD);
    add(PreprocessorParser.PARAMETER, 5, "parameter", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PARENT, 6, "parent", TI.KEYWORD);
    add(PreprocessorParser.PARENTFIELDSAFTER, 19, "parent-fields-after", TI.KEYWORD);
    add(PreprocessorParser.PARENTFIELDSBEFORE, 20, "parent-fields-before", TI.KEYWORD);
    add(PreprocessorParser.PARENTIDFIELD, 15, "parent-id-field", TI.KEYWORD);
    add(PreprocessorParser.PARENTIDRELATION, 18, "parent-id-relation", TI.KEYWORD);
    add(PreprocessorParser.PARTIALKEY, 11, "partial-key", TI.KEYWORD);
    add(PreprocessorParser.PASCAL_KW, 6, "pascal", TI.KEYWORD);
    add(PreprocessorParser.PASSWORDFIELD, 14, "password-field", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PAUSE, 5, "pause", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PBEHASHALGORITHM, 12, "pbe-hash-algorithm", TI.KEYWORD);
    add(PreprocessorParser.PBEKEYROUNDS, 14, "pbe-key-rounds", TI.KEYWORD);
    add(PreprocessorParser.PDBNAME, 7, "pdbname", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.PERFORMANCE, 4, "performance", TI.KEYWORD);
    add(PreprocessorParser.PERIOD, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PERIODSTART, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PERSISTENT, 7, "persistent", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PFCOLOR, 3, "pfcolor", TI.KEYWORD);
    add(PreprocessorParser.PINNABLE, 8, "pinnable", TI.KEYWORD);
    add(PreprocessorParser.PIPE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PLUS, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PLUSMINUSSTART, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PORTRAIT, 8, "portrait", TI.KEYWORD);
    add(PreprocessorParser.POSITION, 8, "position", TI.KEYWORD);
    add(PreprocessorParser.PRECISION, 9, "precision", TI.KEYWORD);
    add(PreprocessorParser.PREFERDATASET, 14, "prefer-dataset", TI.KEYWORD);
    add(PreprocessorParser.PREPROCESS, 7, "preprocess", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PREPROCESSDIRECTIVE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PREPROCESSELSE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PREPROCESSELSEIF, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PREPROCESSENDIF, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PREPROCESSIF, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PREPROCESSJMESSAGE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PREPROCESSMESSAGE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PREPROCESSTOKEN, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PREPROCESSUNDEFINE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PRESELECT, 6, "preselect", TI.KEYWORD);
    add(PreprocessorParser.PREV, 4, "prev", TI.KEYWORD);
    add(PreprocessorParser.PRIMARY, 7, "primary", TI.KEYWORD);
    add(PreprocessorParser.PRINTER, 7, "printer", TI.KEYWORD);
    add(PreprocessorParser.PRINTERSETUP, 13, "printer-setup", TI.KEYWORD);
    add(PreprocessorParser.PRIVATE, 7, "private", TI.KEYWORD);
    add(PreprocessorParser.PRIVILEGES, 10, "privileges", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PROCEDURE, 5, "procedure", TI.KEYWORD);
    add(PreprocessorParser.PROCEDURECALLTYPE, 19, "procedure-call-type", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PROCESS, 7, "process", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PROCHANDLE, 7, "proc-handle", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.PROCSTATUS, 7, "proc-status", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.PROCTEXT, 9, "proc-text", TI.KEYWORD);
    add(PreprocessorParser.PROCTEXTBUFFER, 16, "proc-text-buffer", TI.KEYWORD);
    add(PreprocessorParser.PROFILER, 8, "profiler", TI.KEYWORD | TI.SYSHDL);
    add(PreprocessorParser.PROGRAMNAME, 12, "program-name", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.PROGRESS, 8, "progress", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.PROMPT, 6, "prompt", TI.KEYWORD);
    add(PreprocessorParser.PROMPTFOR, 8, "prompt-for", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PROMSGS, 7, "promsgs", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.PROPARSEDIRECTIVE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PROPATH, 7, "propath", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.PROPERTY, 8, "property", TI.KEYWORD);
    add(PreprocessorParser.Property_getter, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Property_setter, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.PROTECTED, 9, "protected", TI.KEYWORD);
    add(PreprocessorParser.PROVERSION, 7, "proversion", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.PUBLIC, 6, "public", TI.KEYWORD);
    add(PreprocessorParser.PUBLISH, 7, "publish", TI.KEYWORD);
    add(PreprocessorParser.PUT, 3, "put", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PUTBITS, 8, "put-bits", TI.KEYWORD);
    add(PreprocessorParser.PUTBYTE, 8, "put-byte", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PUTBYTE, 7, "putbyte", TI.EXTRA_LITERAL);
    add(PreprocessorParser.PUTBYTES, 9, "put-bytes", TI.KEYWORD);
    add(PreprocessorParser.PUTDOUBLE, 10, "put-double", TI.KEYWORD);
    add(PreprocessorParser.PUTFLOAT, 9, "put-float", TI.KEYWORD);
    add(PreprocessorParser.PUTINT64, 9, "put-int64", TI.KEYWORD);
    add(PreprocessorParser.PUTKEYVALUE, 11, "put-key-value", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.PUTLONG, 8, "put-long", TI.KEYWORD);
    add(PreprocessorParser.PUTSHORT, 9, "put-short", TI.KEYWORD);
    add(PreprocessorParser.PUTSTRING, 10, "put-string", TI.KEYWORD);
    add(PreprocessorParser.PUTUNSIGNEDLONG, 17, "put-unsigned-long", TI.KEYWORD);
    add(PreprocessorParser.PUTUNSIGNEDSHORT, 18, "put-unsigned-short", TI.KEYWORD);
    add(PreprocessorParser.Parameter_list, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Program_root, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Program_tail, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.QSTRING, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.QUERY, 5, "query", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.QUERYCLOSE, 11, "query-close", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.QUERYOFFEND, 13, "query-off-end", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.QUERYTUNING, 12, "query-tuning", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.QUESTION, 8, "question", TI.KEYWORD);
    add(PreprocessorParser.QUIT, 4, "quit", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.QUOTER, 6, "quoter", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.RADIOBUTTONS, 13, "radio-buttons", TI.KEYWORD);
    add(PreprocessorParser.RADIOSET, 9, "radio-set", TI.KEYWORD);
    add(PreprocessorParser.RANDOM, 6, "random", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.RAW, 3, "raw", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.RAWTRANSFER, 12, "raw-transfer", TI.KEYWORD);
    add(PreprocessorParser.RCODEINFORMATION, 10, "rcode-information", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.READ, 4, "read", TI.KEYWORD);
    add(PreprocessorParser.READAVAILABLE, 14, "read-available", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.READEXACTNUM, 14, "read-exact-num", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.READKEY, 7, "readkey", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.READONLY, 9, "read-only", TI.KEYWORD);
    add(PreprocessorParser.REAL, 4, "real", TI.KEYWORD);
    add(PreprocessorParser.RECID, 5, "recid", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.RECORDLENGTH, 10, "record-length", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.RECORD_NAME, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.RECTANGLE, 4, "rectangle", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.RECURSIVE, 9, "recursive", TI.KEYWORD);
    add(PreprocessorParser.REFERENCEONLY, 14, "reference-only", TI.KEYWORD);
    add(PreprocessorParser.REJECTED, 8, "rejected", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.RELATIONFIELDS, 11, "relation-fields", TI.KEYWORD);
    add(PreprocessorParser.RELEASE, 7, "release", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.REPEAT, 6, "repeat", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.REPLACE, 7, "replace", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.REPLICATIONCREATE, 18, "replication-create", TI.KEYWORD);
    add(PreprocessorParser.REPLICATIONDELETE, 18, "replication-delete", TI.KEYWORD);
    add(PreprocessorParser.REPLICATIONWRITE, 17, "replication-write", TI.KEYWORD);
    add(PreprocessorParser.REPOSITION, 10, "reposition", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.REPOSITIONBACKWARD, 19, "reposition-backward", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.REPOSITIONFORWARD, 18, "reposition-forward", TI.KEYWORD);
    add(PreprocessorParser.REPOSITIONMODE, 15, "reposition-mode", TI.KEYWORD);
    add(PreprocessorParser.REPOSITIONTOROW, 17, "reposition-to-row", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.REPOSITIONTOROWID, 19, "reposition-to-rowid", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.REQUEST, 7, "request", TI.KEYWORD);
    add(PreprocessorParser.RESTARTROW, 11, "restart-row", TI.KEYWORD);
    add(PreprocessorParser.RESULT, 6, "result", TI.KEYWORD);
    add(PreprocessorParser.RETAIN, 6, "retain", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.RETAINSHAPE, 8, "retain-shape", TI.KEYWORD);
    add(PreprocessorParser.RETRY, 5, "retry", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.RETRYCANCEL, 12, "retry-cancel", TI.KEYWORD);
    add(PreprocessorParser.RETURN, 6, "return", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.RETURNS, 7, "returns", TI.KEYWORD);
    add(PreprocessorParser.RETURNTOSTARTDIR, 18, "return-to-start-dir", TI.KEYWORD);
    add(PreprocessorParser.RETURNVALUE, 10, "return-value", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.REVERSEFROM, 12, "reverse-from", TI.KEYWORD);
    add(PreprocessorParser.REVERT, 6, "revert", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.REVOKE, 6, "revoke", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.RGBVALUE, 5, "rgb-value", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.RIGHT, 5, "right", TI.KEYWORD);
    add(PreprocessorParser.RIGHTALIGNED, 11, "right-aligned", TI.KEYWORD);
    add(PreprocessorParser.RIGHTANGLE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.RIGHTBRACE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.RIGHTCURLY, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.RIGHTPAREN, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.RIGHTTRIM, 10, "right-trim", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.RINDEX, 7, "r-index", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ROUND, 5, "round", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ROUNDED, 7, "rounded", TI.KEYWORD);
    add(PreprocessorParser.ROUTINELEVEL, 13, "routine-level", TI.KEYWORD);
    add(PreprocessorParser.ROW, 3, "row", TI.KEYWORD);
    add(PreprocessorParser.ROWCREATED, 11, "row-created", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ROWDELETED, 11, "row-deleted", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ROWHEIGHTCHARS, 10, "row-height", TI.KEYWORD);
    add(PreprocessorParser.ROWHEIGHTCHARS, 12, "row-height-chars", TI.EXTRA_LITERAL);
    add(PreprocessorParser.ROWHEIGHTPIXELS, 12, "row-height-pixels", TI.KEYWORD);
    add(PreprocessorParser.ROWID, 5, "rowid", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ROWMODIFIED, 12, "row-modified", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.ROWOF, 6, "row-of", TI.KEYWORD);
    add(PreprocessorParser.ROWSTATE, 9, "row-state", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.ROWUNMODIFIED, 14, "row-unmodified", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.RULE, 4, "rule", TI.KEYWORD);
    add(PreprocessorParser.RUN, 3, "run", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.RUNPROCEDURE, 8, "run-procedure", TI.KEYWORD);
    add(PreprocessorParser.SAVE, 4, "save", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SAVEAS, 7, "save-as", TI.KEYWORD);
    add(PreprocessorParser.SAVECACHE, 9, "savecache", TI.KEYWORD);
    add(PreprocessorParser.SAXATTRIBUTES, 14, "sax-attributes", TI.KEYWORD);
    add(PreprocessorParser.SAXCOMPLETE, 10, "sax-complete", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SAXPARSERERROR, 16, "sax-parser-error", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SAXREADER, 10, "sax-reader", TI.KEYWORD);
    add(PreprocessorParser.SAXRUNNING, 11, "sax-running", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SAXUNINITIALIZED, 17, "sax-uninitialized", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SAXWRITER, 10, "sax-writer", TI.KEYWORD);
    add(PreprocessorParser.SAXWRITEBEGIN, 15, "sax-write-begin", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SAXWRITECOMPLETE, 18, "sax-write-complete", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SAXWRITECONTENT, 17, "sax-write-content", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SAXWRITEELEMENT, 17, "sax-write-element", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SAXWRITEERROR, 15, "sax-write-error", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SAXWRITEIDLE, 14, "sax-write-idle", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SAXWRITETAG, 13, "sax-write-tag", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SCHEMA, 6, "schema", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SCOPEDDEFINE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.SCREEN, 6, "screen", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SCREENIO, 9, "screen-io", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SCREENLINES, 12, "screen-lines", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.SCROLL, 6, "scroll", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SCROLLABLE, 10, "scrollable", TI.KEYWORD);
    add(PreprocessorParser.SCROLLBARHORIZONTAL, 11, "scrollbar-horizontal", TI.KEYWORD);
    add(PreprocessorParser.SCROLLBARVERTICAL, 11, "scrollbar-vertical", TI.KEYWORD);
    add(PreprocessorParser.SCROLLING, 9, "scrolling", TI.KEYWORD);
    add(PreprocessorParser.SDBNAME, 7, "sdbname", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.SEARCH, 6, "search", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.SEARCHSELF, 11, "search-self", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SEARCHTARGET, 13, "search-target", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SECTION, 7, "section", TI.KEYWORD);
    add(PreprocessorParser.SECURITYPOLICY, 15, "security-policy", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.SEEK, 4, "seek", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.SELECT, 6, "select", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SELECTION, 9, "selection", TI.KEYWORD);
    add(PreprocessorParser.SELECTIONLIST, 14, "selection-list", TI.KEYWORD);
    add(PreprocessorParser.SELF, 4, "self", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.SEMI, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.SEND, 4, "send", TI.KEYWORD);
    add(PreprocessorParser.SENDSQLSTATEMENT, 8, "send-sql-statement", TI.KEYWORD);
    add(PreprocessorParser.SEPARATECONNECTION, 19, "separate-connection", TI.KEYWORD);
    add(PreprocessorParser.SEPARATORS, 10, "separators", TI.KEYWORD);
    add(PreprocessorParser.SERIALIZABLE, 12, "serializable", TI.KEYWORD);
    add(PreprocessorParser.SERIALIZEHIDDEN, 16, "serialize-hidden", TI.KEYWORD);
    add(PreprocessorParser.SERIALIZENAME, 14, "serialize-name", TI.KEYWORD);
    add(PreprocessorParser.SERVER, 6, "server", TI.KEYWORD);
    add(PreprocessorParser.SERVERSOCKET, 13, "server-socket", TI.KEYWORD);
    add(PreprocessorParser.SESSION, 7, "session", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.SET, 3, "set", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SETATTRCALLTYPE, 18, "set-attr-call-type", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SETBYTEORDER, 14, "set-byte-order", TI.KEYWORD);
    add(PreprocessorParser.SETCONTENTS, 12, "set-contents", TI.KEYWORD);
    add(PreprocessorParser.SETCURRENTVALUE, 17, "set-current-value", TI.KEYWORD);
    add(PreprocessorParser.SETDBCLIENT, 13, "set-db-client", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.SETPOINTERVALUE, 15, "set-pointer-value", TI.KEYWORD);
    add(PreprocessorParser.SETSIZE, 8, "set-size", TI.KEYWORD);
    add(PreprocessorParser.SETUSERID, 7, "setuserid", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.SHA1DIGEST, 11, "sha1-digest", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.SHARED, 6, "shared", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SHARELOCK, 5, "share-lock", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SHORT, 5, "short", TI.KEYWORD);
    add(PreprocessorParser.SHOWSTATS, 9, "show-stats", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SIDELABELS, 8, "side-labels", TI.KEYWORD);
    add(PreprocessorParser.SIGNATURE, 9, "signature", TI.KEYWORD);
    add(PreprocessorParser.SILENT, 6, "silent", TI.KEYWORD);
    add(PreprocessorParser.SIMPLE, 6, "simple", TI.KEYWORD);
    add(PreprocessorParser.SINGLE, 6, "single", TI.KEYWORD);
    add(PreprocessorParser.SINGLEQUOTE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.SIZE, 4, "size", TI.KEYWORD);
    add(PreprocessorParser.SIZECHARS, 6, "size-chars", TI.KEYWORD);
    add(PreprocessorParser.SIZEPIXELS, 6, "size-pixels", TI.KEYWORD);
    add(PreprocessorParser.SKIP, 4, "skip", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SKIPDELETEDRECORD, 19, "skip-deleted-record", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SLASH, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.SLIDER, 6, "slider", TI.KEYWORD);
    add(PreprocessorParser.SMALLINT, 8, "smallint", TI.KEYWORD);
    add(PreprocessorParser.SOAPHEADER, 11, "soap-header", TI.KEYWORD);
    add(PreprocessorParser.SOAPHEADERENTRYREF, 20, "soap-header-entryref", TI.KEYWORD);
    add(PreprocessorParser.SOCKET, 6, "socket", TI.KEYWORD);
    add(PreprocessorParser.SOME, 4, "some", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SORT, 4, "sort", TI.KEYWORD);
    add(PreprocessorParser.SOURCE, 6, "source", TI.KEYWORD);
    add(PreprocessorParser.SOURCEPROCEDURE, 16, "source-procedure", TI.KEYWORD | TI.SYSHDL);
    add(PreprocessorParser.SPACE, 5, "space", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SQL, 3, "sql", TI.KEYWORD);
    add(PreprocessorParser.SQRT, 4, "sqrt", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.SQSTRING, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.SSLSERVERNAME, 15, "ssl-server-name", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.STAR, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.START, 5, "start", TI.KEYWORD);
    add(PreprocessorParser.STARTING, 8, "starting", TI.KEYWORD);
    add(PreprocessorParser.STARTMOVE, 10, "start-move", TI.KEYWORD);
    add(PreprocessorParser.STARTRESIZE, 12, "start-resize", TI.KEYWORD);
    add(PreprocessorParser.STARTROWRESIZE, 16, "start-row-resize", TI.KEYWORD);
    add(PreprocessorParser.STATIC, 6, "static", TI.KEYWORD);
    add(PreprocessorParser.STATUS, 6, "status", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.STATUSBAR, 10, "status-bar", TI.KEYWORD);
    add(PreprocessorParser.STDCALL_KW, 7, "stdcall", TI.KEYWORD);
    add(PreprocessorParser.STOMPDETECTION, 15, "stomp-detection", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.STOMPFREQUENCY, 15, "stomp-frequency", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.STOP, 4, "stop", TI.KEYWORD);
    add(PreprocessorParser.STOPAFTER, 10, "stop-after", TI.KEYWORD);
    add(PreprocessorParser.STOREDPROCEDURE, 11, "stored-procedure", TI.KEYWORD);
    add(PreprocessorParser.STREAM, 6, "stream", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.STREAMHANDLE, 13, "stream-handle", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.STREAMIO, 9, "stream-io", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.STRETCHTOFIT, 14, "stretch-to-fit", TI.KEYWORD);
    add(PreprocessorParser.STRING, 6, "string", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.STRINGXREF, 11, "string-xref", TI.KEYWORD);
    add(PreprocessorParser.SUBAVERAGE, 7, "sub-average", TI.KEYWORD);
    add(PreprocessorParser.SUBCOUNT, 9, "sub-count", TI.KEYWORD);
    add(PreprocessorParser.SUBMAXIMUM, 7, "sub-maximum", TI.KEYWORD);
    add(PreprocessorParser.SUBMENU, 4, "sub-menu", TI.KEYWORD);
    add(PreprocessorParser.SUBMENUHELP, 13, "sub-menu-help", TI.KEYWORD);
    add(PreprocessorParser.SUBMINIMUM, 7, "sub-minimum", TI.KEYWORD);
    add(PreprocessorParser.SUBSCRIBE, 9, "subscribe", TI.KEYWORD);
    add(PreprocessorParser.SUBSTITUTE, 5, "substitute", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.SUBSTRING, 6, "substring", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.SUBTOTAL, 9, "sub-total", TI.KEYWORD);
    add(PreprocessorParser.SUM, 3, "sum", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.SUMMARY, 7, "summary", TI.KEYWORD);
    add(PreprocessorParser.SUPER, 5, "super", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC | TI.MAY_BE_REGULAR_FUNC | TI.SYSHDL);
    add(PreprocessorParser.SYMMETRICENCRYPTIONALGORITHM, 30, "symmetric-encryption-algorithm", TI.KEYWORD);
    add(PreprocessorParser.SYMMETRICENCRYPTIONIV, 23, "symmetric-encryption-iv", TI.KEYWORD);
    add(PreprocessorParser.SYMMETRICENCRYPTIONKEY, 24, "symmetric-encryption-key", TI.KEYWORD);
    add(PreprocessorParser.SYMMETRICSUPPORT, 17, "symmetric-support", TI.KEYWORD);
    add(PreprocessorParser.SYSTEMDIALOG, 13, "system-dialog", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.SYSTEMHELP, 11, "system-help", TI.KEYWORD);
    add(PreprocessorParser.Scanner_head, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Scanner_tail, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Sql_begins, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Sql_between, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Sql_comp_query, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Sql_in, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Sql_like, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Sql_null_test, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Sql_select_what, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.TABLE, 5, "table", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.TABLEHANDLE, 12, "table-handle", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.TABLENUMBER, 12, "table-number", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.TABLESCAN, 10, "table-scan", TI.KEYWORD);
    add(PreprocessorParser.TARGET, 6, "target", TI.KEYWORD);
    add(PreprocessorParser.TARGETPROCEDURE, 16, "target-procedure", TI.KEYWORD | TI.SYSHDL);
    add(PreprocessorParser.TEMPTABLE, 10, "temp-table", TI.KEYWORD);
    add(PreprocessorParser.TERMINAL, 4, "term", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.TERMINAL, 8, "terminal", TI.EXTRA_LITERAL);
    add(PreprocessorParser.TERMINATE, 9, "terminate", TI.KEYWORD);
    add(PreprocessorParser.TEXT, 4, "text", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.TEXTCURSOR, 11, "text-cursor", TI.KEYWORD | TI.SYSHDL);
    add(PreprocessorParser.TEXTSEGGROW, 8, "text-seg-growth", TI.KEYWORD);
    add(PreprocessorParser.THEN, 4, "then", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.THISOBJECT, 11, "this-object", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.THISPROCEDURE, 14, "this-procedure", TI.KEYWORD | TI.RESERVED | TI.SYSHDL);
    add(PreprocessorParser.THREED, 7, "three-d", TI.KEYWORD);
    add(PreprocessorParser.THROUGH, 7, "through", TI.KEYWORD);
    add(PreprocessorParser.THROUGH, 4, "thru", TI.EXTRA_LITERAL);
    add(PreprocessorParser.THROW, 5, "throw", TI.KEYWORD);
    add(PreprocessorParser.TICMARKS, 9, "tic-marks", TI.KEYWORD);
    add(PreprocessorParser.TILDE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.TIME, 4, "time", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.TIMESTAMP, 9, "timestamp", TI.KEYWORD);
    add(PreprocessorParser.TIMEZONE, 8, "timezone", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.TITLE, 5, "title", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.TO, 2, "to", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.TODAY, 5, "today", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.TOGGLEBOX, 10, "toggle-box", TI.KEYWORD);
    add(PreprocessorParser.TOOLBAR, 8, "tool-bar", TI.KEYWORD);
    add(PreprocessorParser.TOOLTIP, 7, "tooltip", TI.KEYWORD);
    add(PreprocessorParser.TOP, 3, "top", TI.KEYWORD);
    add(PreprocessorParser.TOPIC, 5, "topic", TI.KEYWORD);
    add(PreprocessorParser.TOPNAVQUERY, 13, "top-nav-query", TI.KEYWORD);
    add(PreprocessorParser.TOPONLY, 8, "top-only", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.TOROWID, 8, "to-rowid", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.TOTAL, 5, "total", TI.KEYWORD);
    add(PreprocessorParser.TRAILING, 5, "trailing", TI.KEYWORD);
    add(PreprocessorParser.TRANSACTION, 5, "trans", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC);
    add(PreprocessorParser.TRANSACTION, 8, "transaction", TI.EXTRA_LITERAL);
    add(PreprocessorParser.TRANSACTIONMODE, 16, "transaction-mode", TI.KEYWORD);
    add(PreprocessorParser.TRANSINITPROCEDURE, 20, "trans-init-procedure", TI.KEYWORD);
    add(PreprocessorParser.TRANSPARENT, 8, "transparent", TI.KEYWORD);
    add(PreprocessorParser.TRIGGER, 7, "trigger", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.TRIGGERS, 8, "triggers", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.TRIM, 4, "trim", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.TRUE_KW, 4, "true", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.TRUNCATE, 5, "truncate", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.TTCODEPAGE, 10, "ttcodepage", TI.KEYWORD);
    add(PreprocessorParser.TYPE_NAME, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.TYPELESS_TOKEN, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.TYPEOF, 7, "type-of", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.UNARY_MINUS, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.UNARY_PLUS, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.UNBOX, 5, "unbox", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.UNBUFFERED, 6, "unbuffered", TI.KEYWORD);
    add(PreprocessorParser.UNDERLINE, 6, "underline", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.UNDO, 4, "undo", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.UNFORMATTED, 6, "unformatted", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.UNION, 5, "union", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.UNIQUE, 6, "unique", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.UNIQUEMATCH, 12, "unique-match", TI.KEYWORD);
    add(PreprocessorParser.UNIX, 4, "unix", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.UNKNOWNVALUE, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.UNLESSHIDDEN, 13, "unless-hidden", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.UNLOAD, 6, "unload", TI.KEYWORD);
    add(PreprocessorParser.UNQUOTEDSTRING, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.UNSIGNEDBYTE, 13, "unsigned-byte", TI.KEYWORD);
    add(PreprocessorParser.UNSIGNEDSHORT, 14, "unsigned-short", TI.KEYWORD);
    add(PreprocessorParser.UNSUBSCRIBE, 11, "unsubscribe", TI.KEYWORD);
    add(PreprocessorParser.UP, 2, "up", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.UPDATE, 6, "update", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.URLDECODE, 10, "url-decode", TI.KEYWORD);
    add(PreprocessorParser.URLENCODE, 10, "url-encode", TI.KEYWORD);
    add(PreprocessorParser.USE, 3, "use", TI.KEYWORD);
    add(PreprocessorParser.USEDICTEXPS, 7, "use-dict-exps", TI.KEYWORD);
    add(PreprocessorParser.USEFILENAME, 12, "use-filename", TI.KEYWORD);
    add(PreprocessorParser.USEINDEX, 9, "use-index", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.USER, 4, "user", TI.KEYWORD | TI.MAY_BE_NO_ARG_FUNC | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.USEREVVIDEO, 12, "use-revvideo", TI.KEYWORD);
    add(PreprocessorParser.USERID, 6, "userid", TI.KEYWORD | TI.RESERVED | TI.MAY_BE_NO_ARG_FUNC | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.USER_FUNC, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.USETEXT, 8, "use-text", TI.KEYWORD);
    add(PreprocessorParser.USEUNDERLINE, 13, "use-underline", TI.KEYWORD);
    add(PreprocessorParser.USEWIDGETPOOL, 15, "use-widget-pool", TI.KEYWORD);
    add(PreprocessorParser.USING, 5, "using", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.V6FRAME, 7, "v6frame", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.VALIDATE, 8, "validate", TI.KEYWORD);
    add(PreprocessorParser.VALIDEVENT, 11, "valid-event", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.VALIDHANDLE, 12, "valid-handle", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.VALIDOBJECT, 12, "valid-object", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.VALUE, 5, "value", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.VALUECHANGED, 13, "value-changed", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.VALUES, 6, "values", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.VARIABLE, 3, "variable", TI.KEYWORD);
    add(PreprocessorParser.VERBOSE, 4, "verbose", TI.KEYWORD);
    add(PreprocessorParser.VERTICAL, 4, "vertical", TI.KEYWORD);
    add(PreprocessorParser.VIEW, 4, "view", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.VIEWAS, 7, "view-as", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.VMS, 3, "vms", TI.KEYWORD);
    add(PreprocessorParser.VOID, 4, "void", TI.KEYWORD);
    add(PreprocessorParser.WAIT, 4, "wait", TI.KEYWORD);
    add(PreprocessorParser.WAITFOR, 8, "wait-for", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.WARNING, 7, "warning", TI.KEYWORD);
    add(PreprocessorParser.WEBCONTEXT, 7, "web-context", TI.KEYWORD | TI.SYSHDL);
    add(PreprocessorParser.WEEKDAY, 7, "weekday", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.WHEN, 4, "when", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.WHERE, 5, "where", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.WHILE, 5, "while", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.WIDGET, 6, "widget", TI.KEYWORD);
    add(PreprocessorParser.WIDGETHANDLE, 8, "widget-handle", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.WIDGETID, 9, "widget-id", TI.KEYWORD);
    add(PreprocessorParser.WIDGETPOOL, 11, "widget-pool", TI.KEYWORD);
    add(PreprocessorParser.WIDTH, 5, "width", TI.KEYWORD);
    add(PreprocessorParser.WIDTHCHARS, 7, "width-chars", TI.KEYWORD);
    add(PreprocessorParser.WIDTHPIXELS, 7, "width-pixels", TI.KEYWORD);
    add(PreprocessorParser.WINDOW, 6, "window", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.WINDOWDELAYEDMINIMIZE, 18, "window-delayed-minimize", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.WINDOWMAXIMIZED, 12, "window-maximized", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.WINDOWMINIMIZED, 12, "window-minimized", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.WINDOWNAME, 11, "window-name", TI.KEYWORD);
    add(PreprocessorParser.WINDOWNORMAL, 13, "window-normal", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.WITH, 4, "with", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.WORDINDEX, 10, "word-index", TI.KEYWORD);
    add(PreprocessorParser.WORKTABLE, 8, "work-table", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.WORKTABLE, 8, "workfile", TI.EXTRA_LITERAL);
    add(PreprocessorParser.WRITE, 5, "write", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.WS, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.Widget_ref, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.With_columns, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.With_down, 0, "", TI.NO_FLAGS);
    add(PreprocessorParser.X, 1, "x", TI.KEYWORD);
    add(PreprocessorParser.XCODE, 5, "xcode", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.XDOCUMENT, 10, "x-document", TI.KEYWORD);
    add(PreprocessorParser.XMLDATATYPE, 13, "xml-data-type", TI.KEYWORD);
    add(PreprocessorParser.XMLNODENAME, 13, "xml-node-name", TI.KEYWORD);
    add(PreprocessorParser.XMLNODETYPE, 13, "xml-node-type", TI.KEYWORD);
    add(PreprocessorParser.XNODEREF, 9, "x-noderef", TI.KEYWORD);
    add(PreprocessorParser.XOF, 4, "x-of", TI.KEYWORD);
    add(PreprocessorParser.XREF, 4, "xref", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.XREFXML, 8, "xref-xml", TI.KEYWORD);
    add(PreprocessorParser.Y, 1, "y", TI.KEYWORD);
    add(PreprocessorParser.YEAR, 4, "year", TI.KEYWORD | TI.MAY_BE_REGULAR_FUNC);
    add(PreprocessorParser.YES, 3, "yes", TI.KEYWORD | TI.RESERVED);
    add(PreprocessorParser.YESNO, 6, "yes-no", TI.KEYWORD);
    add(PreprocessorParser.YESNOCANCEL, 13, "yes-no-cancel", TI.KEYWORD);
    add(PreprocessorParser.YOF, 4, "y-of", TI.KEYWORD);

    for (int i = 1; i <= PreprocessorParser.Last_Token_Number; i++) {
      String typeName = NodeTypes.getTypeName(i);
      if (typeName.length() == 0)
        continue;
      TokenInfo info = new TokenInfo();
      info.isNatural = typeName.equals(typeName.toUpperCase());
      allTokens[i] = info;
    }
    // Operators and punctuation
    allTokens[PreprocessorParser.SLASH].keywordText = "/";
    allTokens[PreprocessorParser.LEXCOLON].keywordText = ":";
    allTokens[PreprocessorParser.OBJCOLON].keywordText = ":";
    allTokens[PreprocessorParser.DOUBLECOLON].keywordText = "::";
    allTokens[PreprocessorParser.LEXAT].keywordText = "@";
    allTokens[PreprocessorParser.LEFTBRACE].keywordText = "[";
    allTokens[PreprocessorParser.RIGHTBRACE].keywordText = "]";
    allTokens[PreprocessorParser.CARET].keywordText = "^";
    allTokens[PreprocessorParser.COMMA].keywordText = ",";
    allTokens[PreprocessorParser.EXCLAMATION].keywordText = "!";
    allTokens[PreprocessorParser.EQUAL].keywordText = "=";
    allTokens[PreprocessorParser.LEFTPAREN].keywordText = "(";
    allTokens[PreprocessorParser.RIGHTPAREN].keywordText = ")";
    allTokens[PreprocessorParser.SEMI].keywordText = ";";
    allTokens[PreprocessorParser.STAR].keywordText = "*";
    allTokens[PreprocessorParser.UNKNOWNVALUE].keywordText = "?";
    allTokens[PreprocessorParser.BACKTICK].keywordText = "`";
    allTokens[PreprocessorParser.NAMEDOT].keywordText = ".";
    allTokens[PreprocessorParser.PERIOD].keywordText = ".";
    allTokens[PreprocessorParser.GTOREQUAL].keywordText = ">=";
    allTokens[PreprocessorParser.RIGHTANGLE].keywordText = ">";
    allTokens[PreprocessorParser.GTORLT].keywordText = "<>";
    allTokens[PreprocessorParser.LTOREQUAL].keywordText = "<=";
    allTokens[PreprocessorParser.LEFTANGLE].keywordText = "<";
    allTokens[PreprocessorParser.PLUS].keywordText = "+";
    allTokens[PreprocessorParser.MINUS].keywordText = "-";

    // Keywords
    allTokens[PreprocessorParser.AACBIT].keywordText = "_CBIT";
    allTokens[PreprocessorParser.AACONTROL].keywordText = "_CONTROL";
    allTokens[PreprocessorParser.AALIST].keywordText = "_LIST";
    allTokens[PreprocessorParser.AAMEMORY].keywordText = "_MEMORY";
    allTokens[PreprocessorParser.AAMSG].keywordText = "_MSG";
    allTokens[PreprocessorParser.AAPCONTROL].keywordText = "_PCONTROL";
    allTokens[PreprocessorParser.AASERIAL].keywordText = "_SERIAL-NUM";
    allTokens[PreprocessorParser.AATRACE].keywordText = "_TRACE";
    allTokens[PreprocessorParser.ABSOLUTE].keywordText = "ABSOLUTE";
    allTokens[PreprocessorParser.ACCELERATOR].keywordText = "ACCELERATOR";
    allTokens[PreprocessorParser.ACCUMULATE].keywordText = "ACCUMULATE";
    allTokens[PreprocessorParser.ACTIVEWINDOW].keywordText = "ACTIVE-WINDOW";
    allTokens[PreprocessorParser.ADD].keywordText = "ADD";
    allTokens[PreprocessorParser.ADVISE].keywordText = "ADVISE";
    allTokens[PreprocessorParser.ALERTBOX].keywordText = "ALERT-BOX";
    allTokens[PreprocessorParser.ALIAS].keywordText = "ALIAS";
    allTokens[PreprocessorParser.ALL].keywordText = "ALL";
    allTokens[PreprocessorParser.ALLOWREPLICATION].keywordText = "ALLOW-REPLICATION";
    allTokens[PreprocessorParser.ALTER].keywordText = "ALTER";
    allTokens[PreprocessorParser.ALTERNATEKEY].keywordText = "ALTERNATE-KEY";
    allTokens[PreprocessorParser.AMBIGUOUS].keywordText = "AMBIGUOUS";
    allTokens[PreprocessorParser.ANALYZE].keywordText = "ANALYZE";
    allTokens[PreprocessorParser.AND].keywordText = "AND";
    allTokens[PreprocessorParser.ANSIONLY].keywordText = "ANSI-ONLY";
    allTokens[PreprocessorParser.ANY].keywordText = "ANY";
    allTokens[PreprocessorParser.ANYWHERE].keywordText = "ANYWHERE";
    allTokens[PreprocessorParser.APPEND].keywordText = "APPEND";
    allTokens[PreprocessorParser.APPLICATION].keywordText = "APPLICATION";
    allTokens[PreprocessorParser.APPLY].keywordText = "APPLY";
    allTokens[PreprocessorParser.ARRAYMESSAGE].keywordText = "ARRAY-MESSAGE";
    allTokens[PreprocessorParser.AS].keywordText = "AS";
    allTokens[PreprocessorParser.ASC].keywordText = "ASC";
    allTokens[PreprocessorParser.ASCENDING].keywordText = "ASCENDING";
    allTokens[PreprocessorParser.ASKOVERWRITE].keywordText = "ASK-OVERWRITE";
    allTokens[PreprocessorParser.ASSIGN].keywordText = "ASSIGN";
    allTokens[PreprocessorParser.ASYNCHRONOUS].keywordText = "ASYNCHRONOUS";
    allTokens[PreprocessorParser.AT].keywordText = "AT";
    allTokens[PreprocessorParser.ATTACHMENT].keywordText = "ATTACHMENT";
    allTokens[PreprocessorParser.ATTRSPACE].keywordText = "ATTR-SPACE";
    allTokens[PreprocessorParser.AUTHORIZATION].keywordText = "AUTHORIZATION";
    allTokens[PreprocessorParser.AUTOCOMPLETION].keywordText = "AUTO-COMPLETION";
    allTokens[PreprocessorParser.AUTOENDKEY].keywordText = "AUTO-END-KEY";
    allTokens[PreprocessorParser.AUTOGO].keywordText = "AUTO-GO";
    allTokens[PreprocessorParser.AUTOMATIC].keywordText = "AUTOMATIC";
    allTokens[PreprocessorParser.AUTORETURN].keywordText = "AUTO-RETURN";
    allTokens[PreprocessorParser.AVAILABLE].keywordText = "AVAILABLE";
    allTokens[PreprocessorParser.AVERAGE].keywordText = "AVERAGE";
    allTokens[PreprocessorParser.AVG].keywordText = "AVG";
    allTokens[PreprocessorParser.BACKGROUND].keywordText = "BACKGROUND";
    allTokens[PreprocessorParser.BACKWARDS].keywordText = "BACKWARDS";
    allTokens[PreprocessorParser.BASEKEY].keywordText = "BASE-KEY";
    allTokens[PreprocessorParser.BEFOREHIDE].keywordText = "BEFORE-HIDE";
    allTokens[PreprocessorParser.BEGINS].keywordText = "BEGINS";
    allTokens[PreprocessorParser.BELL].keywordText = "BELL";
    allTokens[PreprocessorParser.BETWEEN].keywordText = "BETWEEN";
    allTokens[PreprocessorParser.BGCOLOR].keywordText = "BGCOLOR";
    allTokens[PreprocessorParser.BIGENDIAN].keywordText = "BIG-ENDIAN";
    allTokens[PreprocessorParser.BINARY].keywordText = "BINARY";
    allTokens[PreprocessorParser.BINDWHERE].keywordText = "BIND-WHERE";
    allTokens[PreprocessorParser.BLANK].keywordText = "BLANK";
    allTokens[PreprocessorParser.BOTH].keywordText = "BOTH";
    allTokens[PreprocessorParser.BOTTOM].keywordText = "BOTTOM";
    allTokens[PreprocessorParser.BREAK].keywordText = "BREAK";
    allTokens[PreprocessorParser.BROWSE].keywordText = "BROWSE";
    allTokens[PreprocessorParser.BTOS].keywordText = "BTOS";
    allTokens[PreprocessorParser.BUFFER].keywordText = "BUFFER";
    allTokens[PreprocessorParser.BUFFERCHARS].keywordText = "BUFFER-CHARS";
    allTokens[PreprocessorParser.BUFFERCOMPARE].keywordText = "BUFFER-COMPARE";
    allTokens[PreprocessorParser.BUFFERCOPY].keywordText = "BUFFER-COPY";
    allTokens[PreprocessorParser.BUFFERLINES].keywordText = "BUFFER-LINES";
    allTokens[PreprocessorParser.BUFFERNAME].keywordText = "BUFFER-NAME";
    allTokens[PreprocessorParser.BUTTON].keywordText = "BUTTON";
    allTokens[PreprocessorParser.BUTTONS].keywordText = "BUTTONS";
    allTokens[PreprocessorParser.BY].keywordText = "BY";
    allTokens[PreprocessorParser.BYPOINTER].keywordText = "BY-POINTER";
    allTokens[PreprocessorParser.BYTE].keywordText = "BYTE";
    allTokens[PreprocessorParser.BYVARIANTPOINTER].keywordText = "BY-VARIANT-POINTER";
    allTokens[PreprocessorParser.CACHE].keywordText = "CACHE";
    allTokens[PreprocessorParser.CACHESIZE].keywordText = "CACHE-SIZE";
    allTokens[PreprocessorParser.CALL].keywordText = "CALL";
    allTokens[PreprocessorParser.CANDO].keywordText = "CAN-DO";
    allTokens[PreprocessorParser.CANFIND].keywordText = "CAN-FIND";
    allTokens[PreprocessorParser.CANQUERY].keywordText = "CAN-QUERY";
    allTokens[PreprocessorParser.CANSET].keywordText = "CAN-SET";
    allTokens[PreprocessorParser.CANCELBUTTON].keywordText = "CANCEL-BUTTON";
    allTokens[PreprocessorParser.CAPS].keywordText = "UPPER";
    allTokens[PreprocessorParser.CASE].keywordText = "CASE";
    allTokens[PreprocessorParser.CASESENSITIVE].keywordText = "CASE-SENSITIVE";
    allTokens[PreprocessorParser.CDECL_KW].keywordText = "CDECL";
    allTokens[PreprocessorParser.CENTERED].keywordText = "CENTERED";
    allTokens[PreprocessorParser.CHAINED].keywordText = "CHAINED";
    allTokens[PreprocessorParser.CHARACTER].keywordText = "CHARACTER";
    allTokens[PreprocessorParser.CHARACTERLENGTH].keywordText = "CHARACTERLENGTH";
    allTokens[PreprocessorParser.CHECK].keywordText = "CHECK";
    allTokens[PreprocessorParser.CHOOSE].keywordText = "CHOOSE";
    allTokens[PreprocessorParser.CHR].keywordText = "CHR";
    allTokens[PreprocessorParser.CLEAR].keywordText = "CLEAR";
    allTokens[PreprocessorParser.CLIPBOARD].keywordText = "CLIPBOARD";
    allTokens[PreprocessorParser.CLOSE].keywordText = "CLOSE";
    allTokens[PreprocessorParser.CODEBASELOCATOR].keywordText = "CODEBASE-LOCATOR";
    allTokens[PreprocessorParser.CODEPAGECONVERT].keywordText = "CODEPAGE-CONVERT";
    allTokens[PreprocessorParser.COLLATE].keywordText = "COLLATE";
    allTokens[PreprocessorParser.COLOF].keywordText = "COL-OF";
    allTokens[PreprocessorParser.COLON].keywordText = "COLON";
    allTokens[PreprocessorParser.COLONALIGNED].keywordText = "COLON-ALIGNED";
    allTokens[PreprocessorParser.COLOR].keywordText = "COLOR";
    allTokens[PreprocessorParser.COLORTABLE].keywordText = "COLOR-TABLE";
    allTokens[PreprocessorParser.COLUMN].keywordText = "COLUMN";
    allTokens[PreprocessorParser.COLUMNBGCOLOR].keywordText = "COLUMN-BGCOLOR";
    allTokens[PreprocessorParser.COLUMNDCOLOR].keywordText = "COLUMN-DCOLOR";
    allTokens[PreprocessorParser.COLUMNFGCOLOR].keywordText = "COLUMN-FGCOLOR";
    allTokens[PreprocessorParser.COLUMNFONT].keywordText = "COLUMN-FONT";
    allTokens[PreprocessorParser.COLUMNLABEL].keywordText = "COLUMN-LABEL";
    allTokens[PreprocessorParser.COLUMNOF].keywordText = "COLUMN-OF";
    allTokens[PreprocessorParser.COLUMNPFCOLOR].keywordText = "COLUMN-PFCOLOR";
    allTokens[PreprocessorParser.COLUMNS].keywordText = "COLUMNS";
    allTokens[PreprocessorParser.COMHANDLE].keywordText = "COMPONENT-HANDLE";
    allTokens[PreprocessorParser.COMBOBOX].keywordText = "COMBO-BOX";
    allTokens[PreprocessorParser.COMMAND].keywordText = "COMMAND";
    allTokens[PreprocessorParser.COMPARE].keywordText = "COMPARE";
    allTokens[PreprocessorParser.COMPARES].keywordText = "COMPARES";
    allTokens[PreprocessorParser.COMPLETE].keywordText = "COMPLETE";
    allTokens[PreprocessorParser.COMPILE].keywordText = "COMPILE";
    allTokens[PreprocessorParser.COMPILER].keywordText = "COMPILER";
    allTokens[PreprocessorParser.COMSELF].keywordText = "COM-SELF";
    allTokens[PreprocessorParser.CONFIGNAME].keywordText = "CONFIG-NAME";
    allTokens[PreprocessorParser.CONNECT].keywordText = "CONNECT";
    allTokens[PreprocessorParser.CONNECTED].keywordText = "CONNECTED";
    allTokens[PreprocessorParser.CONTAINS].keywordText = "CONTAINS";
    allTokens[PreprocessorParser.CONTENTS].keywordText = "CONTENTS";
    allTokens[PreprocessorParser.CONTEXT].keywordText = "CONTEXT";
    allTokens[PreprocessorParser.CONTEXTHELP].keywordText = "CONTEXT-HELP";
    allTokens[PreprocessorParser.CONTEXTHELPFILE].keywordText = "CONTEXT-HELP-FILE";
    allTokens[PreprocessorParser.CONTEXTHELPID].keywordText = "CONTEXT-HELP-ID";
    allTokens[PreprocessorParser.CONTEXTPOPUP].keywordText = "CONTEXT-POPUP";
    allTokens[PreprocessorParser.CONTROL].keywordText = "CONTROL";
    allTokens[PreprocessorParser.CONTROLFRAME].keywordText = "CONTROL-FRAME";
    allTokens[PreprocessorParser.CONVERT].keywordText = "CONVERT";
    allTokens[PreprocessorParser.CONVERT3DCOLORS].keywordText = "CONVERT-3D-COLORS";
    allTokens[PreprocessorParser.COUNT].keywordText = "COUNT";
    allTokens[PreprocessorParser.COUNTOF].keywordText = "COUNT-OF";
    allTokens[PreprocessorParser.CREATE].keywordText = "CREATE";
    allTokens[PreprocessorParser.CREATETESTFILE].keywordText = "CREATE-TEST-FILE";
    allTokens[PreprocessorParser.CURRENT].keywordText = "CURRENT";
    allTokens[PreprocessorParser.CURRENTCHANGED].keywordText = "CURRENT-CHANGED";
    allTokens[PreprocessorParser.CURRENTENVIRONMENT].keywordText = "CURRENT-ENVIRONMENT";
    allTokens[PreprocessorParser.CURRENTLANGUAGE].keywordText = "CURRENT-LANGUAGE";
    allTokens[PreprocessorParser.CURRENTRESULTROW].keywordText = "CURRENT-RESULT-ROW";
    allTokens[PreprocessorParser.CURRENTVALUE].keywordText = "CURRENT-VALUE";
    allTokens[PreprocessorParser.CURRENTWINDOW].keywordText = "CURRENT-WINDOW";
    allTokens[PreprocessorParser.CURSOR].keywordText = "CURSOR";
    allTokens[PreprocessorParser.DATABASE].keywordText = "DATABASE";
    allTokens[PreprocessorParser.DATABIND].keywordText = "DATA-BIND";
    allTokens[PreprocessorParser.DATASERVERS].keywordText = "DATASERVERS";
    allTokens[PreprocessorParser.DATE].keywordText = "DATE";
    allTokens[PreprocessorParser.DAY].keywordText = "DAY";
    allTokens[PreprocessorParser.DBCODEPAGE].keywordText = "DBCODEPAGE";
    allTokens[PreprocessorParser.DBCOLLATION].keywordText = "DBCOLLATION";
    allTokens[PreprocessorParser.DBIMS].keywordText = "DBIMS";
    allTokens[PreprocessorParser.DBNAME].keywordText = "DBNAME";
    allTokens[PreprocessorParser.DBPARAM].keywordText = "DBPARAM";
    allTokens[PreprocessorParser.DBRESTRICTIONS].keywordText = "DBRESTRICTIONS";
    allTokens[PreprocessorParser.DBTASKID].keywordText = "DBTASKID";
    allTokens[PreprocessorParser.DBTYPE].keywordText = "DBTYPE";
    allTokens[PreprocessorParser.DBVERSION].keywordText = "DBVERSION";
    allTokens[PreprocessorParser.DCOLOR].keywordText = "DCOLOR";
    allTokens[PreprocessorParser.DDE].keywordText = "DDE";
    allTokens[PreprocessorParser.DEBLANK].keywordText = "DEBLANK";
    allTokens[PreprocessorParser.DEBUG].keywordText = "DEBUG";
    allTokens[PreprocessorParser.DEBUGLIST].keywordText = "DEBUG-LIST";
    allTokens[PreprocessorParser.DEBUGGER].keywordText = "DEBUGGER";
    allTokens[PreprocessorParser.DECIMAL].keywordText = "DECIMAL";
    allTokens[PreprocessorParser.DECIMALS].keywordText = "DECIMALS";
    allTokens[PreprocessorParser.DECLARE].keywordText = "DECLARE";
    allTokens[PreprocessorParser.DEFAULT].keywordText = "DEFAULT";
    allTokens[PreprocessorParser.DEFAULTBUTTON].keywordText = "DEFAULT-BUTTON";
    allTokens[PreprocessorParser.DEFAULTEXTENSION].keywordText = "DEFAULT-EXTENSION";
    allTokens[PreprocessorParser.DEFAULTNOXLATE].keywordText = "DEFAULT-NOXLATE";
    allTokens[PreprocessorParser.DEFAULTWINDOW].keywordText = "DEFAULT-WINDOW";
    allTokens[PreprocessorParser.DEFERLOBFETCH].keywordText = "DEFER-LOB-FETCH";
    allTokens[PreprocessorParser.DEFINE].keywordText = "DEFINE";
    allTokens[PreprocessorParser.DEFINED].keywordText = "DEFINED";
    allTokens[PreprocessorParser.DELETE_KW].keywordText = "DELETE";
    allTokens[PreprocessorParser.DELETERESULTLISTENTRY].keywordText = "DELETE-RESULT-LIST-ENTRY";
    allTokens[PreprocessorParser.DELIMITER].keywordText = "DELIMITER";
    allTokens[PreprocessorParser.DESCENDING].keywordText = "DESCENDING";
    allTokens[PreprocessorParser.DESELECTION].keywordText = "DESELECTION";
    allTokens[PreprocessorParser.DIALOGBOX].keywordText = "DIALOG-BOX";
    allTokens[PreprocessorParser.DIALOGHELP].keywordText = "DIALOG-HELP";
    allTokens[PreprocessorParser.DICTIONARY].keywordText = "DICTIONARY";
    allTokens[PreprocessorParser.DIR].keywordText = "DIR";
    allTokens[PreprocessorParser.DISABLE].keywordText = "DISABLE";
    allTokens[PreprocessorParser.DISABLEAUTOZAP].keywordText = "DISABLE-AUTO-ZAP";
    allTokens[PreprocessorParser.DISABLED].keywordText = "DISABLED";
    allTokens[PreprocessorParser.DISCONNECT].keywordText = "DISCONNECT";
    allTokens[PreprocessorParser.DISPLAY].keywordText = "DISPLAY";
    allTokens[PreprocessorParser.DISTINCT].keywordText = "DISTINCT";
    allTokens[PreprocessorParser.DO].keywordText = "DO";
    allTokens[PreprocessorParser.DOS].keywordText = "DOS";
    allTokens[PreprocessorParser.DOUBLE].keywordText = "DOUBLE";
    allTokens[PreprocessorParser.DOWN].keywordText = "DOWN";
    allTokens[PreprocessorParser.DROP].keywordText = "DROP";
    allTokens[PreprocessorParser.DROPDOWN].keywordText = "DROP-DOWN";
    allTokens[PreprocessorParser.DROPDOWNLIST].keywordText = "DROP-DOWN-LIST";
    allTokens[PreprocessorParser.DROPFILENOTIFY].keywordText = "DROP-FILE-NOTIFY";
    allTokens[PreprocessorParser.DROPTARGET].keywordText = "DROP-TARGET";
    allTokens[PreprocessorParser.DUMP].keywordText = "DUMP";
    allTokens[PreprocessorParser.DYNAMIC].keywordText = "DYNAMIC";
    allTokens[PreprocessorParser.DYNAMICFUNCTION].keywordText = "DYNAMIC-FUNCTION";
    allTokens[PreprocessorParser.EACH].keywordText = "EACH";
    allTokens[PreprocessorParser.ECHO].keywordText = "ECHO";
    allTokens[PreprocessorParser.EDGECHARS].keywordText = "EDGE-CHARS";
    allTokens[PreprocessorParser.EDGEPIXELS].keywordText = "EDGE-PIXELS";
    allTokens[PreprocessorParser.EDITUNDO].keywordText = "EDIT-UNDO";
    allTokens[PreprocessorParser.EDITING].keywordText = "EDITING";
    allTokens[PreprocessorParser.EDITOR].keywordText = "EDITOR";
    allTokens[PreprocessorParser.ELSE].keywordText = "ELSE";
    allTokens[PreprocessorParser.EMPTY].keywordText = "EMPTY";
    allTokens[PreprocessorParser.ENABLE].keywordText = "ENABLE";
    allTokens[PreprocessorParser.ENCODE].keywordText = "ENCODE";
    allTokens[PreprocessorParser.END].keywordText = "END";
    allTokens[PreprocessorParser.ENDMOVE].keywordText = "END-MOVE";
    allTokens[PreprocessorParser.ENDRESIZE].keywordText = "END-RESIZE";
    allTokens[PreprocessorParser.ENDROWRESIZE].keywordText = "END-ROW-RESIZE";
    allTokens[PreprocessorParser.ENDKEY].keywordText = "END-KEY";
    allTokens[PreprocessorParser.ENTERED].keywordText = "ENTERED";
    allTokens[PreprocessorParser.ENTRY].keywordText = "ENTRY";
    allTokens[PreprocessorParser.EQ].keywordText = "EQ";
    allTokens[PreprocessorParser.ERROR].keywordText = "ERROR";
    allTokens[PreprocessorParser.ERRORSTATUS].keywordText = "ERROR-STATUS";
    allTokens[PreprocessorParser.ESCAPE].keywordText = "ESCAPE";
    allTokens[PreprocessorParser.ETIME_KW].keywordText = "ETIME";
    allTokens[PreprocessorParser.EVENTPROCEDURE].keywordText = "EVENT-PROCEDURE";
    allTokens[PreprocessorParser.EVENTS].keywordText = "EVENTS";
    allTokens[PreprocessorParser.EXCEPT].keywordText = "EXCEPT";
    allTokens[PreprocessorParser.EXCLUSIVEID].keywordText = "EXCLUSIVE-ID";
    allTokens[PreprocessorParser.EXCLUSIVELOCK].keywordText = "EXCLUSIVE-LOCK";
    allTokens[PreprocessorParser.EXCLUSIVEWEBUSER].keywordText = "EXCLUSIVE-WEB-USER";
    allTokens[PreprocessorParser.EXECUTE].keywordText = "EXECUTE";
    allTokens[PreprocessorParser.EXISTS].keywordText = "EXISTS";
    allTokens[PreprocessorParser.EXP].keywordText = "EXP";
    allTokens[PreprocessorParser.EXPAND].keywordText = "EXPAND";
    allTokens[PreprocessorParser.EXPANDABLE].keywordText = "EXPANDABLE";
    allTokens[PreprocessorParser.EXPLICIT].keywordText = "EXPLICIT";
    allTokens[PreprocessorParser.EXPORT].keywordText = "EXPORT";
    allTokens[PreprocessorParser.EXTENDED].keywordText = "EXTENDED";
    allTokens[PreprocessorParser.EXTENT].keywordText = "EXTENT";
    allTokens[PreprocessorParser.EXTERNAL].keywordText = "EXTERNAL";
    allTokens[PreprocessorParser.FALSE_KW].keywordText = "FALSE";
    allTokens[PreprocessorParser.FETCH].keywordText = "FETCH";
    allTokens[PreprocessorParser.FGCOLOR].keywordText = "FGCOLOR";
    allTokens[PreprocessorParser.FIELD].keywordText = "FIELD";
    allTokens[PreprocessorParser.FIELDS].keywordText = "FIELDS";
    allTokens[PreprocessorParser.FILE].keywordText = "FILE-NAME";
    allTokens[PreprocessorParser.FILEINFORMATION].keywordText = "FILE-INFORMATION";
    allTokens[PreprocessorParser.FILL].keywordText = "FILL";
    allTokens[PreprocessorParser.FILLIN].keywordText = "FILL-IN";
    allTokens[PreprocessorParser.FILTERS].keywordText = "FILTERS";
    allTokens[PreprocessorParser.FIND].keywordText = "FIND";
    allTokens[PreprocessorParser.FINDCASESENSITIVE].keywordText = "FIND-CASE-SENSITIVE";
    allTokens[PreprocessorParser.FINDER].keywordText = "FINDER";
    allTokens[PreprocessorParser.FINDGLOBAL].keywordText = "FIND-GLOBAL";
    allTokens[PreprocessorParser.FINDNEXTOCCURRENCE].keywordText = "FIND-NEXT-OCCURRENCE";
    allTokens[PreprocessorParser.FINDPREVOCCURRENCE].keywordText = "FIND-PREV-OCCURRENCE";
    allTokens[PreprocessorParser.FINDSELECT].keywordText = "FIND-SELECT";
    allTokens[PreprocessorParser.FINDWRAPAROUND].keywordText = "FIND-WRAP-AROUND";
    allTokens[PreprocessorParser.FIRST].keywordText = "FIRST";
    allTokens[PreprocessorParser.FIRSTOF].keywordText = "FIRST-OF";
    allTokens[PreprocessorParser.FITLASTCOLUMN].keywordText = "FIT-LAST-COLUMN";
    allTokens[PreprocessorParser.FIXEDONLY].keywordText = "FIXED-ONLY";
    allTokens[PreprocessorParser.FLATBUTTON].keywordText = "FLAT-BUTTON";
    allTokens[PreprocessorParser.FLOAT].keywordText = "FLOAT";
    allTokens[PreprocessorParser.FOCUS].keywordText = "FOCUS";
    allTokens[PreprocessorParser.FONT].keywordText = "FONT";
    allTokens[PreprocessorParser.FONTBASEDLAYOUT].keywordText = "FONT-BASED-LAYOUT";
    allTokens[PreprocessorParser.FONTTABLE].keywordText = "FONT-TABLE";
    allTokens[PreprocessorParser.FOR].keywordText = "FOR";
    allTokens[PreprocessorParser.FORCEFILE].keywordText = "FORCE-FILE";
    allTokens[PreprocessorParser.FORMINPUT].keywordText = "FORMINPUT";
    allTokens[PreprocessorParser.FORMAT].keywordText = "FORMAT";
    allTokens[PreprocessorParser.FORWARDS].keywordText = "FORWARDS";
    allTokens[PreprocessorParser.FRAME].keywordText = "FRAME";
    allTokens[PreprocessorParser.FRAMECOL].keywordText = "FRAME-COL";
    allTokens[PreprocessorParser.FRAMEDB].keywordText = "FRAME-DB";
    allTokens[PreprocessorParser.FRAMEDOWN].keywordText = "FRAME-DOWN";
    allTokens[PreprocessorParser.FRAMEFIELD].keywordText = "FRAME-FIELD";
    allTokens[PreprocessorParser.FRAMEFILE].keywordText = "FRAME-FILE";
    allTokens[PreprocessorParser.FRAMEINDEX].keywordText = "FRAME-INDEX";
    allTokens[PreprocessorParser.FRAMELINE].keywordText = "FRAME-LINE";
    allTokens[PreprocessorParser.FRAMENAME].keywordText = "FRAME-NAME";
    allTokens[PreprocessorParser.FRAMEROW].keywordText = "FRAME-ROW";
    allTokens[PreprocessorParser.FRAMEVALUE].keywordText = "FRAME-VALUE";
    allTokens[PreprocessorParser.FREQUENCY].keywordText = "FREQUENCY";
    allTokens[PreprocessorParser.FROM].keywordText = "FROM";
    allTokens[PreprocessorParser.FROMCURRENT].keywordText = "FROM-CURRENT";
    allTokens[PreprocessorParser.FUNCTION].keywordText = "FUNCTION";
    allTokens[PreprocessorParser.GE].keywordText = "GE";
    allTokens[PreprocessorParser.GENERATEMD5].keywordText = "GENERATE-MD5";
    allTokens[PreprocessorParser.GET].keywordText = "GET";
    allTokens[PreprocessorParser.GETBITS].keywordText = "GET-BITS";
    allTokens[PreprocessorParser.GETBUFFERHANDLE].keywordText = "GET-BUFFER-HANDLE";
    allTokens[PreprocessorParser.GETBYTE].keywordText = "GET-BYTE";
    allTokens[PreprocessorParser.GETBYTES].keywordText = "GET-BYTES";
    allTokens[PreprocessorParser.GETBYTEORDER].keywordText = "GET-BYTE-ORDER";
    allTokens[PreprocessorParser.GETCGILIST].keywordText = "GET-CGI-LIST";
    allTokens[PreprocessorParser.GETCGIVALUE].keywordText = "GET-CGI-VALUE";
    allTokens[PreprocessorParser.GETCODEPAGE].keywordText = "GET-CODEPAGE";
    allTokens[PreprocessorParser.GETCODEPAGES].keywordText = "GET-CODEPAGES";
    allTokens[PreprocessorParser.GETCOLLATIONS].keywordText = "GET-COLLATIONS";
    allTokens[PreprocessorParser.GETCONFIGVALUE].keywordText = "GET-CONFIG-VALUE";
    allTokens[PreprocessorParser.GETDOUBLE].keywordText = "GET-DOUBLE";
    allTokens[PreprocessorParser.GETFILE].keywordText = "GET-FILE";
    allTokens[PreprocessorParser.GETFLOAT].keywordText = "GET-FLOAT";
    allTokens[PreprocessorParser.GETKEYVALUE].keywordText = "GET-KEY-VALUE";
    allTokens[PreprocessorParser.GETLICENSE].keywordText = "GET-LICENSE";
    allTokens[PreprocessorParser.GETLONG].keywordText = "GET-LONG";
    allTokens[PreprocessorParser.GETPOINTERVALUE].keywordText = "GET-POINTER-VALUE";
    allTokens[PreprocessorParser.GETSHORT].keywordText = "GET-SHORT";
    allTokens[PreprocessorParser.GETSIZE].keywordText = "GET-SIZE";
    allTokens[PreprocessorParser.GETSTRING].keywordText = "GET-STRING";
    allTokens[PreprocessorParser.GETUNSIGNEDSHORT].keywordText = "GET-UNSIGNED-SHORT";
    allTokens[PreprocessorParser.GLOBAL].keywordText = "GLOBAL";
    allTokens[PreprocessorParser.GOON].keywordText = "GO-ON";
    allTokens[PreprocessorParser.GOPENDING].keywordText = "GO-PENDING";
    allTokens[PreprocessorParser.GRANT].keywordText = "GRANT";
    allTokens[PreprocessorParser.GRAPHICEDGE].keywordText = "GRAPHIC-EDGE";
    allTokens[PreprocessorParser.GROUP].keywordText = "GROUP";
    allTokens[PreprocessorParser.GTHAN].keywordText = "GT";
    allTokens[PreprocessorParser.HANDLE].keywordText = "HANDLE";
    allTokens[PreprocessorParser.HAVING].keywordText = "HAVING";
    allTokens[PreprocessorParser.HEADER].keywordText = "HEADER";
    allTokens[PreprocessorParser.HEIGHT].keywordText = "HEIGHT";
    allTokens[PreprocessorParser.HEIGHTCHARS].keywordText = "HEIGHT-CHARS";
    allTokens[PreprocessorParser.HEIGHTPIXELS].keywordText = "HEIGHT-PIXELS";
    allTokens[PreprocessorParser.HELP].keywordText = "HELP";
    allTokens[PreprocessorParser.HELPTOPIC].keywordText = "HELP-TOPIC";
    allTokens[PreprocessorParser.HIDE].keywordText = "HIDE";
    allTokens[PreprocessorParser.HINT].keywordText = "HINT";
    allTokens[PreprocessorParser.HORIZONTAL].keywordText = "HORIZONTAL";
    allTokens[PreprocessorParser.HOSTBYTEORDER].keywordText = "HOST-BYTE-ORDER";
    allTokens[PreprocessorParser.HTMLENDOFLINE].keywordText = "HTML-END-OF-LINE";
    allTokens[PreprocessorParser.HTMLFRAMEBEGIN].keywordText = "HTML-FRAME-BEGIN";
    allTokens[PreprocessorParser.HTMLFRAMEEND].keywordText = "HTML-FRAME-END";
    allTokens[PreprocessorParser.HTMLHEADERBEGIN].keywordText = "HTML-HEADER-BEGIN";
    allTokens[PreprocessorParser.HTMLHEADEREND].keywordText = "HTML-HEADER-END";
    allTokens[PreprocessorParser.HTMLTITLEBEGIN].keywordText = "HTML-TITLE-BEGIN";
    allTokens[PreprocessorParser.HTMLTITLEEND].keywordText = "HTML-TITLE-END";
    allTokens[PreprocessorParser.IF].keywordText = "IF";
    allTokens[PreprocessorParser.IMAGE].keywordText = "IMAGE";
    allTokens[PreprocessorParser.IMAGEDOWN].keywordText = "IMAGE-DOWN";
    allTokens[PreprocessorParser.IMAGEINSENSITIVE].keywordText = "IMAGE-INSENSITIVE";
    allTokens[PreprocessorParser.IMAGESIZE].keywordText = "IMAGE-SIZE";
    allTokens[PreprocessorParser.IMAGESIZECHARS].keywordText = "IMAGE-SIZE-CHARS";
    allTokens[PreprocessorParser.IMAGESIZEPIXELS].keywordText = "IMAGE-SIZE-PIXELS";
    allTokens[PreprocessorParser.IMAGEUP].keywordText = "IMAGE-UP";
    allTokens[PreprocessorParser.IMPORT].keywordText = "IMPORT";
    allTokens[PreprocessorParser.IN_KW].keywordText = "IN";
    allTokens[PreprocessorParser.INCREMENTEXCLUSIVEID].keywordText = "INCREMENT-EXCLUSIVE-ID";
    allTokens[PreprocessorParser.INDEX].keywordText = "INDEX";
    allTokens[PreprocessorParser.INDEXHINT].keywordText = "INDEX-HINT";
    allTokens[PreprocessorParser.INDEXEDREPOSITION].keywordText = "INDEXED-REPOSITION";
    allTokens[PreprocessorParser.INDICATOR].keywordText = "INDICATOR";
    allTokens[PreprocessorParser.INFORMATION].keywordText = "INFORMATION";
    allTokens[PreprocessorParser.INITIAL].keywordText = "INITIAL";
    allTokens[PreprocessorParser.INITIALDIR].keywordText = "INITIAL-DIR";
    allTokens[PreprocessorParser.INITIALFILTER].keywordText = "INITIAL-FILTER";
    allTokens[PreprocessorParser.INITIATE].keywordText = "INITIATE";
    allTokens[PreprocessorParser.INNER].keywordText = "INNER";
    allTokens[PreprocessorParser.INNERCHARS].keywordText = "INNER-CHARS";
    allTokens[PreprocessorParser.INNERLINES].keywordText = "INNER-LINES";
    allTokens[PreprocessorParser.INPUT].keywordText = "INPUT";
    allTokens[PreprocessorParser.INPUTOUTPUT].keywordText = "INPUT-OUTPUT";
    allTokens[PreprocessorParser.INSERT].keywordText = "INSERT";
    allTokens[PreprocessorParser.INTEGER].keywordText = "INTEGER";
    allTokens[PreprocessorParser.INTO].keywordText = "INTO";
    allTokens[PreprocessorParser.IS].keywordText = "IS";
    allTokens[PreprocessorParser.ISATTRSPACE].keywordText = "IS-ATTR-SPACE";
    allTokens[PreprocessorParser.ISLEADBYTE].keywordText = "IS-LEAD-BYTE";
    allTokens[PreprocessorParser.ITEM].keywordText = "ITEM";
    allTokens[PreprocessorParser.JOIN].keywordText = "JOIN";
    allTokens[PreprocessorParser.JOINBYSQLDB].keywordText = "JOIN-BY-SQLDB";
    allTokens[PreprocessorParser.KBLABEL].keywordText = "KBLABEL";
    allTokens[PreprocessorParser.KEEPMESSAGES].keywordText = "KEEP-MESSAGES";
    allTokens[PreprocessorParser.KEEPTABORDER].keywordText = "KEEP-TAB-ORDER";
    allTokens[PreprocessorParser.KEY].keywordText = "KEY";
    allTokens[PreprocessorParser.KEYCODE].keywordText = "KEY-CODE";
    allTokens[PreprocessorParser.KEYFUNCTION].keywordText = "KEY-FUNCTION";
    allTokens[PreprocessorParser.KEYLABEL].keywordText = "KEY-LABEL";
    allTokens[PreprocessorParser.KEYS].keywordText = "KEYS";
    allTokens[PreprocessorParser.KEYWORD].keywordText = "KEYWORD";
    allTokens[PreprocessorParser.KEYWORDALL].keywordText = "KEYWORD-ALL";
    allTokens[PreprocessorParser.LABEL].keywordText = "LABEL";
    allTokens[PreprocessorParser.LABELBGCOLOR].keywordText = "LABEL-BGCOLOR";
    allTokens[PreprocessorParser.LABELDCOLOR].keywordText = "LABEL-DCOLOR";
    allTokens[PreprocessorParser.LABELFGCOLOR].keywordText = "LABEL-FGCOLOR";
    allTokens[PreprocessorParser.LABELFONT].keywordText = "LABEL-FONT";
    allTokens[PreprocessorParser.LANDSCAPE].keywordText = "LANDSCAPE";
    allTokens[PreprocessorParser.LANGUAGES].keywordText = "LANGUAGES";
    allTokens[PreprocessorParser.LARGE].keywordText = "LARGE";
    allTokens[PreprocessorParser.LARGETOSMALL].keywordText = "LARGE-TO-SMALL";
    allTokens[PreprocessorParser.LAST].keywordText = "LAST";
    allTokens[PreprocessorParser.LASTEVENT].keywordText = "LAST-EVENT";
    allTokens[PreprocessorParser.LASTOF].keywordText = "LAST-OF";
    allTokens[PreprocessorParser.LASTKEY].keywordText = "LAST-KEY";
    allTokens[PreprocessorParser.LC].keywordText = "LOWER";
    allTokens[PreprocessorParser.LDBNAME].keywordText = "LDBNAME";
    allTokens[PreprocessorParser.LE].keywordText = "LE";
    allTokens[PreprocessorParser.LEAVE].keywordText = "LEAVE";
    allTokens[PreprocessorParser.LEFT].keywordText = "LEFT";
    allTokens[PreprocessorParser.LEFTALIGNED].keywordText = "LEFT-ALIGNED";
    allTokens[PreprocessorParser.LEFTTRIM].keywordText = "LEFT-TRIM";
    allTokens[PreprocessorParser.LENGTH].keywordText = "LENGTH";
    allTokens[PreprocessorParser.LIBRARY].keywordText = "LIBRARY";
    allTokens[PreprocessorParser.LIKE].keywordText = "LIKE";
    allTokens[PreprocessorParser.LINECOUNTER].keywordText = "LINE-COUNTER";
    allTokens[PreprocessorParser.LISTEVENTS].keywordText = "LIST-EVENTS";
    allTokens[PreprocessorParser.LISTITEMPAIRS].keywordText = "LIST-ITEM-PAIRS";
    allTokens[PreprocessorParser.LISTITEMS].keywordText = "LIST-ITEMS";
    allTokens[PreprocessorParser.LISTQUERYATTRS].keywordText = "LIST-QUERY-ATTRS";
    allTokens[PreprocessorParser.LISTSETATTRS].keywordText = "LIST-SET-ATTRS";
    allTokens[PreprocessorParser.LISTWIDGETS].keywordText = "LIST-WIDGETS";
    allTokens[PreprocessorParser.LISTING].keywordText = "LISTING";
    allTokens[PreprocessorParser.LITTLEENDIAN].keywordText = "LITTLE-ENDIAN";
    allTokens[PreprocessorParser.LOAD].keywordText = "LOAD";
    allTokens[PreprocessorParser.LOADPICTURE].keywordText = "LOAD-PICTURE";
    allTokens[PreprocessorParser.LOCKED].keywordText = "LOCKED";
    allTokens[PreprocessorParser.LOG].keywordText = "LOG";
    allTokens[PreprocessorParser.LOGICAL].keywordText = "LOGICAL";
    allTokens[PreprocessorParser.LONG].keywordText = "LONG";
    allTokens[PreprocessorParser.LOOKAHEAD].keywordText = "LOOKAHEAD";
    allTokens[PreprocessorParser.LOOKUP].keywordText = "LOOKUP";
    allTokens[PreprocessorParser.LTHAN].keywordText = "LT";
    allTokens[PreprocessorParser.MACHINECLASS].keywordText = "MACHINE-CLASS";
    allTokens[PreprocessorParser.MAP].keywordText = "MAP";
    allTokens[PreprocessorParser.MARGINEXTRA].keywordText = "MARGIN-EXTRA";
    allTokens[PreprocessorParser.MATCHES].keywordText = "MATCHES";
    allTokens[PreprocessorParser.MAXCHARS].keywordText = "MAX-CHARS";
    allTokens[PreprocessorParser.MAXROWS].keywordText = "MAX-ROWS";
    allTokens[PreprocessorParser.MAXSIZE].keywordText = "MAX-SIZE";
    allTokens[PreprocessorParser.MAXVALUE].keywordText = "MAX-VALUE";
    allTokens[PreprocessorParser.MAXIMIZE].keywordText = "MAXIMIZE";
    allTokens[PreprocessorParser.MAXIMUM].keywordText = "MAXIMUM";
    allTokens[PreprocessorParser.MEMBER].keywordText = "MEMBER";
    allTokens[PreprocessorParser.MEMPTR].keywordText = "MEMPTR";
    allTokens[PreprocessorParser.MENU].keywordText = "MENU";
    allTokens[PreprocessorParser.MENUITEM].keywordText = "MENU-ITEM";
    allTokens[PreprocessorParser.MENUBAR].keywordText = "MENU-BAR";
    allTokens[PreprocessorParser.MESSAGE].keywordText = "MESSAGE";
    allTokens[PreprocessorParser.MESSAGEDIGEST].keywordText = "MESSAGE-DIGEST";
    allTokens[PreprocessorParser.MESSAGELINE].keywordText = "MESSAGE-LINE";
    allTokens[PreprocessorParser.MESSAGELINES].keywordText = "MESSAGE-LINES";
    allTokens[PreprocessorParser.MINSIZE].keywordText = "MIN-SIZE";
    allTokens[PreprocessorParser.MINVALUE].keywordText = "MIN-VALUE";
    allTokens[PreprocessorParser.MINIMUM].keywordText = "MINIMUM";
    allTokens[PreprocessorParser.MODULO].keywordText = "MODULO";
    allTokens[PreprocessorParser.MONTH].keywordText = "MONTH";
    allTokens[PreprocessorParser.MOUSE].keywordText = "MOUSE";
    allTokens[PreprocessorParser.MOUSEPOINTER].keywordText = "MOUSE-POINTER";
    allTokens[PreprocessorParser.MPE].keywordText = "MPE";
    allTokens[PreprocessorParser.MULTIPLE].keywordText = "MULTIPLE";
    allTokens[PreprocessorParser.MULTIPLEKEY].keywordText = "MULTIPLE-KEY";
    allTokens[PreprocessorParser.MUSTEXIST].keywordText = "MUST-EXIST";
    allTokens[PreprocessorParser.NATIVE].keywordText = "NATIVE";
    allTokens[PreprocessorParser.NE].keywordText = "NE";
    allTokens[PreprocessorParser.NEW].keywordText = "NEW";
    allTokens[PreprocessorParser.NEXT].keywordText = "NEXT";
    allTokens[PreprocessorParser.NEXTPROMPT].keywordText = "NEXT-PROMPT";
    allTokens[PreprocessorParser.NEXTVALUE].keywordText = "NEXT-VALUE";
    allTokens[PreprocessorParser.NO].keywordText = "NO";
    allTokens[PreprocessorParser.NOAPPLY].keywordText = "NO-APPLY";
    allTokens[PreprocessorParser.NOARRAYMESSAGE].keywordText = "NO-ARRAY-MESSAGE";
    allTokens[PreprocessorParser.NOASSIGN].keywordText = "NO-ASSIGN";
    allTokens[PreprocessorParser.NOATTRLIST].keywordText = "NO-ATTR-LIST";
    allTokens[PreprocessorParser.NOATTRSPACE].keywordText = "NO-ATTR-SPACE";
    allTokens[PreprocessorParser.NOAUTOVALIDATE].keywordText = "NO-AUTO-VALIDATE";
    allTokens[PreprocessorParser.NOBINDWHERE].keywordText = "NO-BIND-WHERE";
    allTokens[PreprocessorParser.NOBOX].keywordText = "NO-BOX";
    allTokens[PreprocessorParser.NOCOLUMNSCROLLING].keywordText = "NO-COLUMN-SCROLLING";
    allTokens[PreprocessorParser.NOCONSOLE].keywordText = "NO-CONSOLE";
    allTokens[PreprocessorParser.NOCONVERT].keywordText = "NO-CONVERT";
    allTokens[PreprocessorParser.NOCONVERT3DCOLORS].keywordText = "NO-CONVERT-3D-COLORS";
    allTokens[PreprocessorParser.NOCURRENTVALUE].keywordText = "NO-CURRENT-VALUE";
    allTokens[PreprocessorParser.NODEBUG].keywordText = "NO-DEBUG";
    allTokens[PreprocessorParser.NODRAG].keywordText = "NO-DRAG";
    allTokens[PreprocessorParser.NOECHO].keywordText = "NO-ECHO";
    allTokens[PreprocessorParser.NOEMPTYSPACE].keywordText = "NO-EMPTY-SPACE";
    allTokens[PreprocessorParser.NOERROR_KW].keywordText = "NO-ERROR";
    allTokens[PreprocessorParser.NOFILL].keywordText = "NO-FILL";
    allTokens[PreprocessorParser.NOFOCUS].keywordText = "NO-FOCUS";
    allTokens[PreprocessorParser.NOHELP].keywordText = "NO-HELP";
    allTokens[PreprocessorParser.NOHIDE].keywordText = "NO-HIDE";
    allTokens[PreprocessorParser.NOINDEXHINT].keywordText = "NO-INDEX-HINT";
    allTokens[PreprocessorParser.NOJOINBYSQLDB].keywordText = "NO-JOIN-BY-SQLDB";
    allTokens[PreprocessorParser.NOLABELS].keywordText = "NO-LABELS";
    allTokens[PreprocessorParser.NOLOCK].keywordText = "NO-LOCK";
    allTokens[PreprocessorParser.NOLOOKAHEAD].keywordText = "NO-LOOKAHEAD";
    allTokens[PreprocessorParser.NOMAP].keywordText = "NO-MAP";
    allTokens[PreprocessorParser.NOMESSAGE].keywordText = "NO-MESSAGE";
    allTokens[PreprocessorParser.NONE].keywordText = "NONE";
    allTokens[PreprocessorParser.NOPAUSE].keywordText = "NO-PAUSE";
    allTokens[PreprocessorParser.NOPREFETCH].keywordText = "NO-PREFETCH";
    allTokens[PreprocessorParser.NORETURNVALUE].keywordText = "NO-RETURN-VALUE";
    allTokens[PreprocessorParser.NORMAL].keywordText = "NORMAL";
    allTokens[PreprocessorParser.NOROWMARKERS].keywordText = "NO-ROW-MARKERS";
    allTokens[PreprocessorParser.NOSCROLLBARVERTICAL].keywordText = "NO-SCROLLBAR-VERTICAL";
    allTokens[PreprocessorParser.NOSEPARATECONNECTION].keywordText = "NO-SEPARATE-CONNECTION";
    allTokens[PreprocessorParser.NOSEPARATORS].keywordText = "NO-SEPARATORS";
    allTokens[PreprocessorParser.NOTABSTOP].keywordText = "NO-TAB-STOP";
    allTokens[PreprocessorParser.NOUNDERLINE].keywordText = "NO-UNDERLINE";
    allTokens[PreprocessorParser.NOUNDO].keywordText = "NO-UNDO";
    allTokens[PreprocessorParser.NOVALIDATE].keywordText = "NO-VALIDATE";
    allTokens[PreprocessorParser.NOWAIT].keywordText = "NO-WAIT";
    allTokens[PreprocessorParser.NOWORDWRAP].keywordText = "NO-WORD-WRAP";
    allTokens[PreprocessorParser.NOT].keywordText = "NOT";
    allTokens[PreprocessorParser.NULL_KW].keywordText = "NULL";
    allTokens[PreprocessorParser.NUMALIASES].keywordText = "NUM-ALIASES";
    allTokens[PreprocessorParser.NUMCOPIES].keywordText = "NUM-COPIES";
    allTokens[PreprocessorParser.NUMDBS].keywordText = "NUM-DBS";
    allTokens[PreprocessorParser.NUMENTRIES].keywordText = "NUM-ENTRIES";
    allTokens[PreprocessorParser.NUMRESULTS].keywordText = "NUM-RESULTS";
    allTokens[PreprocessorParser.NUMERIC].keywordText = "NUMERIC";
    allTokens[PreprocessorParser.OBJECT].keywordText = "OBJECT";
    allTokens[PreprocessorParser.OCTETLENGTH].keywordText = "OCTET-LENGTH";
    allTokens[PreprocessorParser.OF].keywordText = "OF";
    allTokens[PreprocessorParser.OFF].keywordText = "OFF";
    allTokens[PreprocessorParser.OK].keywordText = "OK";
    allTokens[PreprocessorParser.OKCANCEL].keywordText = "OK-CANCEL";
    allTokens[PreprocessorParser.OLD].keywordText = "OLD";
    allTokens[PreprocessorParser.ON].keywordText = "ON";
    allTokens[PreprocessorParser.ONLY].keywordText = "ONLY";
    allTokens[PreprocessorParser.OPEN].keywordText = "OPEN";
    allTokens[PreprocessorParser.OPSYS].keywordText = "OPSYS";
    allTokens[PreprocessorParser.OPTION].keywordText = "OPTION";
    allTokens[PreprocessorParser.OR].keywordText = "OR";
    allTokens[PreprocessorParser.ORDER].keywordText = "ORDER";
    allTokens[PreprocessorParser.ORDEREDJOIN].keywordText = "ORDERED-JOIN";
    allTokens[PreprocessorParser.ORDINAL].keywordText = "ORDINAL";
    allTokens[PreprocessorParser.OS2].keywordText = "OS2";
    allTokens[PreprocessorParser.OS400].keywordText = "OS400";
    allTokens[PreprocessorParser.OSAPPEND].keywordText = "OS-APPEND";
    allTokens[PreprocessorParser.OSCOMMAND].keywordText = "OS-COMMAND";
    allTokens[PreprocessorParser.OSCOPY].keywordText = "OS-COPY";
    allTokens[PreprocessorParser.OSCREATEDIR].keywordText = "OS-CREATE-DIR";
    allTokens[PreprocessorParser.OSDELETE].keywordText = "OS-DELETE";
    allTokens[PreprocessorParser.OSDIR].keywordText = "OS-DIR";
    allTokens[PreprocessorParser.OSDRIVES].keywordText = "OS-DRIVES";
    allTokens[PreprocessorParser.OSERROR].keywordText = "OS-ERROR";
    allTokens[PreprocessorParser.OSGETENV].keywordText = "OS-GETENV";
    allTokens[PreprocessorParser.OSRENAME].keywordText = "OS-RENAME";
    allTokens[PreprocessorParser.OTHERWISE].keywordText = "OTHERWISE";
    allTokens[PreprocessorParser.OUTER].keywordText = "OUTER";
    allTokens[PreprocessorParser.OUTERJOIN].keywordText = "OUTER-JOIN";
    allTokens[PreprocessorParser.OUTPUT].keywordText = "OUTPUT";
    allTokens[PreprocessorParser.OVERLAY].keywordText = "OVERLAY";
    allTokens[PreprocessorParser.OVERRIDE].keywordText = "OVERRIDE";
    allTokens[PreprocessorParser.PAGE].keywordText = "PAGE";
    allTokens[PreprocessorParser.PAGEBOTTOM].keywordText = "PAGE-BOTTOM";
    allTokens[PreprocessorParser.PAGENUMBER].keywordText = "PAGE-NUMBER";
    allTokens[PreprocessorParser.PAGESIZE_KW].keywordText = "PAGE-SIZE";
    allTokens[PreprocessorParser.PAGETOP].keywordText = "PAGE-TOP";
    allTokens[PreprocessorParser.PAGEWIDTH].keywordText = "PAGE-WIDTH";
    allTokens[PreprocessorParser.PAGED].keywordText = "PAGED";
    allTokens[PreprocessorParser.PARAMETER].keywordText = "PARAMETER";
    allTokens[PreprocessorParser.PARENT].keywordText = "PARENT";
    allTokens[PreprocessorParser.PARENTFIELDSAFTER].keywordText = "PARENT-FIELDS-AFTER";
    allTokens[PreprocessorParser.PARENTFIELDSBEFORE].keywordText = "PARENT-FIELDS-BEFORE";
    allTokens[PreprocessorParser.PARENTIDFIELD].keywordText = "PARENT-ID-FIELD";
    allTokens[PreprocessorParser.PARENTIDRELATION].keywordText = "PARENT-ID-RELATION";
    allTokens[PreprocessorParser.PARTIALKEY].keywordText = "PARTIAL-KEY";
    allTokens[PreprocessorParser.PASCAL_KW].keywordText = "PASCAL";
    allTokens[PreprocessorParser.PAUSE].keywordText = "PAUSE";
    allTokens[PreprocessorParser.PDBNAME].keywordText = "PDBNAME";
    allTokens[PreprocessorParser.PERFORMANCE].keywordText = "PERFORMANCE";
    allTokens[PreprocessorParser.PERSISTENT].keywordText = "PERSISTENT";
    allTokens[PreprocessorParser.PFCOLOR].keywordText = "PFCOLOR";
    allTokens[PreprocessorParser.PINNABLE].keywordText = "PINNABLE";
    allTokens[PreprocessorParser.PORTRAIT].keywordText = "PORTRAIT";
    allTokens[PreprocessorParser.POSITION].keywordText = "POSITION";
    allTokens[PreprocessorParser.PRECISION].keywordText = "PRECISION";
    allTokens[PreprocessorParser.PREPROCESS].keywordText = "PREPROCESS";
    allTokens[PreprocessorParser.PRESELECT].keywordText = "PRESELECT";
    allTokens[PreprocessorParser.PREV].keywordText = "PREV";
    allTokens[PreprocessorParser.PRIMARY].keywordText = "PRIMARY";
    allTokens[PreprocessorParser.PRINTER].keywordText = "PRINTER";
    allTokens[PreprocessorParser.PRINTERSETUP].keywordText = "PRINTER-SETUP";
    allTokens[PreprocessorParser.PRIVATE].keywordText = "PRIVATE";
    allTokens[PreprocessorParser.PRIVILEGES].keywordText = "PRIVILEGES";
    allTokens[PreprocessorParser.PROCTEXT].keywordText = "PROC-TEXT";
    allTokens[PreprocessorParser.PROCTEXTBUFFER].keywordText = "PROC-TEXT-BUFFER";
    allTokens[PreprocessorParser.PROCHANDLE].keywordText = "PROC-HANDLE";
    allTokens[PreprocessorParser.PROCSTATUS].keywordText = "PROC-STATUS";
    allTokens[PreprocessorParser.PROCEDURE].keywordText = "PROCEDURE";
    allTokens[PreprocessorParser.PROCESS].keywordText = "PROCESS";
    allTokens[PreprocessorParser.PROFILER].keywordText = "PROFILER";
    allTokens[PreprocessorParser.PROGRAMNAME].keywordText = "PROGRAM-NAME";
    allTokens[PreprocessorParser.PROGRESS].keywordText = "PROGRESS";
    allTokens[PreprocessorParser.PROMPT].keywordText = "PROMPT";
    allTokens[PreprocessorParser.PROMPTFOR].keywordText = "PROMPT-FOR";
    allTokens[PreprocessorParser.PROMSGS].keywordText = "PROMSGS";
    allTokens[PreprocessorParser.PROPATH].keywordText = "PROPATH";
    allTokens[PreprocessorParser.PROVERSION].keywordText = "PROVERSION";
    allTokens[PreprocessorParser.PUBLIC].keywordText = "PUBLIC";
    allTokens[PreprocessorParser.PUBLISH].keywordText = "PUBLISH";
    allTokens[PreprocessorParser.PUT].keywordText = "PUT";
    allTokens[PreprocessorParser.PUTBITS].keywordText = "PUT-BITS";
    allTokens[PreprocessorParser.PUTBYTE].keywordText = "PUT-BYTE";
    allTokens[PreprocessorParser.PUTBYTES].keywordText = "PUT-BYTES";
    allTokens[PreprocessorParser.PUTDOUBLE].keywordText = "PUT-DOUBLE";
    allTokens[PreprocessorParser.PUTFLOAT].keywordText = "PUT-FLOAT";
    allTokens[PreprocessorParser.PUTKEYVALUE].keywordText = "PUT-KEY-VALUE";
    allTokens[PreprocessorParser.PUTLONG].keywordText = "PUT-LONG";
    allTokens[PreprocessorParser.PUTSHORT].keywordText = "PUT-SHORT";
    allTokens[PreprocessorParser.PUTSTRING].keywordText = "PUT-STRING";
    allTokens[PreprocessorParser.PUTUNSIGNEDSHORT].keywordText = "PUT-UNSIGNED-SHORT";
    allTokens[PreprocessorParser.QUERY].keywordText = "QUERY";
    allTokens[PreprocessorParser.QUERYCLOSE].keywordText = "QUERY-CLOSE";
    allTokens[PreprocessorParser.QUERYOFFEND].keywordText = "QUERY-OFF-END";
    allTokens[PreprocessorParser.QUERYTUNING].keywordText = "QUERY-TUNING";
    allTokens[PreprocessorParser.QUESTION].keywordText = "QUESTION";
    allTokens[PreprocessorParser.QUIT].keywordText = "QUIT";
    allTokens[PreprocessorParser.QUOTER].keywordText = "QUOTER";
    allTokens[PreprocessorParser.RINDEX].keywordText = "R-INDEX";
    allTokens[PreprocessorParser.RADIOBUTTONS].keywordText = "RADIO-BUTTONS";
    allTokens[PreprocessorParser.RADIOSET].keywordText = "RADIO-SET";
    allTokens[PreprocessorParser.RANDOM].keywordText = "RANDOM";
    allTokens[PreprocessorParser.RAW].keywordText = "RAW";
    allTokens[PreprocessorParser.RAWTRANSFER].keywordText = "RAW-TRANSFER";
    allTokens[PreprocessorParser.RCODEINFORMATION].keywordText = "RCODE-INFORMATION";
    allTokens[PreprocessorParser.READ].keywordText = "READ";
    allTokens[PreprocessorParser.READAVAILABLE].keywordText = "READ-AVAILABLE";
    allTokens[PreprocessorParser.READEXACTNUM].keywordText = "READ-EXACT-NUM";
    allTokens[PreprocessorParser.READONLY].keywordText = "READ-ONLY";
    allTokens[PreprocessorParser.READKEY].keywordText = "READKEY";
    allTokens[PreprocessorParser.REAL].keywordText = "REAL";
    allTokens[PreprocessorParser.RECID].keywordText = "RECID";
    allTokens[PreprocessorParser.RECORDLENGTH].keywordText = "RECORD-LENGTH";
    allTokens[PreprocessorParser.RECTANGLE].keywordText = "RECTANGLE";
    allTokens[PreprocessorParser.RECURSIVE].keywordText = "RECURSIVE";
    allTokens[PreprocessorParser.RELEASE].keywordText = "RELEASE";
    allTokens[PreprocessorParser.REPEAT].keywordText = "REPEAT";
    allTokens[PreprocessorParser.REPLACE].keywordText = "REPLACE";
    allTokens[PreprocessorParser.REPLICATIONCREATE].keywordText = "REPLICATION-CREATE";
    allTokens[PreprocessorParser.REPLICATIONDELETE].keywordText = "REPLICATION-DELETE";
    allTokens[PreprocessorParser.REPLICATIONWRITE].keywordText = "REPLICATION-WRITE";
    allTokens[PreprocessorParser.REPOSITION].keywordText = "REPOSITION";
    allTokens[PreprocessorParser.REPOSITIONFORWARD].keywordText = "REPOSITION-FORWARD";
    allTokens[PreprocessorParser.REPOSITIONBACKWARD].keywordText = "REPOSITION-BACKWARD";
    allTokens[PreprocessorParser.REPOSITIONTOROW].keywordText = "REPOSITION-TO-ROW";
    allTokens[PreprocessorParser.REPOSITIONTOROWID].keywordText = "REPOSITION-TO-ROWID";
    allTokens[PreprocessorParser.REQUEST].keywordText = "REQUEST";
    allTokens[PreprocessorParser.RESULT].keywordText = "RESULT";
    allTokens[PreprocessorParser.RETAIN].keywordText = "RETAIN";
    allTokens[PreprocessorParser.RETAINSHAPE].keywordText = "RETAIN-SHAPE";
    allTokens[PreprocessorParser.RETRY].keywordText = "RETRY";
    allTokens[PreprocessorParser.RETRYCANCEL].keywordText = "RETRY-CANCEL";
    allTokens[PreprocessorParser.RETURN].keywordText = "RETURN";
    allTokens[PreprocessorParser.RETURNTOSTARTDIR].keywordText = "RETURN-TO-START-DIR";
    allTokens[PreprocessorParser.RETURNVALUE].keywordText = "RETURN-VALUE";
    allTokens[PreprocessorParser.RETURNS].keywordText = "RETURNS";
    allTokens[PreprocessorParser.REVERSEFROM].keywordText = "REVERSE-FROM";
    allTokens[PreprocessorParser.REVERT].keywordText = "REVERT";
    allTokens[PreprocessorParser.REVOKE].keywordText = "REVOKE";
    allTokens[PreprocessorParser.RGBVALUE].keywordText = "RGB-VALUE";
    allTokens[PreprocessorParser.RIGHT].keywordText = "RIGHT";
    allTokens[PreprocessorParser.RIGHTALIGNED].keywordText = "RIGHT-ALIGNED";
    allTokens[PreprocessorParser.RIGHTTRIM].keywordText = "RIGHT-TRIM";
    allTokens[PreprocessorParser.ROUND].keywordText = "ROUND";
    allTokens[PreprocessorParser.ROW].keywordText = "ROW";
    allTokens[PreprocessorParser.ROWHEIGHTCHARS].keywordText = "ROW-HEIGHT-CHARS";
    allTokens[PreprocessorParser.ROWHEIGHTPIXELS].keywordText = "ROW-HEIGHT-PIXELS";
    allTokens[PreprocessorParser.ROWID].keywordText = "ROWID";
    allTokens[PreprocessorParser.ROWOF].keywordText = "ROW-OF";
    allTokens[PreprocessorParser.RULE].keywordText = "RULE";
    allTokens[PreprocessorParser.RUN].keywordText = "RUN";
    allTokens[PreprocessorParser.RUNPROCEDURE].keywordText = "RUN-PROCEDURE";
    allTokens[PreprocessorParser.SAVE].keywordText = "SAVE";
    allTokens[PreprocessorParser.SAVECACHE].keywordText = "SAVECACHE";
    allTokens[PreprocessorParser.SAVEAS].keywordText = "SAVE-AS";
    allTokens[PreprocessorParser.SAXREADER].keywordText = "SAX-READER";
    allTokens[PreprocessorParser.SCHEMA].keywordText = "SCHEMA";
    allTokens[PreprocessorParser.SCREEN].keywordText = "SCREEN";
    allTokens[PreprocessorParser.SCREENIO].keywordText = "SCREEN-IO";
    allTokens[PreprocessorParser.SCREENLINES].keywordText = "SCREEN-LINES";
    allTokens[PreprocessorParser.SCROLL].keywordText = "SCROLL";
    allTokens[PreprocessorParser.SCROLLABLE].keywordText = "SCROLLABLE";
    allTokens[PreprocessorParser.SCROLLBARHORIZONTAL].keywordText = "SCROLLBAR-HORIZONTAL";
    allTokens[PreprocessorParser.SCROLLBARVERTICAL].keywordText = "SCROLLBAR-VERTICAL";
    allTokens[PreprocessorParser.SCROLLING].keywordText = "SCROLLING";
    allTokens[PreprocessorParser.SDBNAME].keywordText = "SDBNAME";
    allTokens[PreprocessorParser.SEARCH].keywordText = "SEARCH";
    allTokens[PreprocessorParser.SEARCHSELF].keywordText = "SEARCH-SELF";
    allTokens[PreprocessorParser.SEARCHTARGET].keywordText = "SEARCH-TARGET";
    allTokens[PreprocessorParser.SECTION].keywordText = "SECTION";
    allTokens[PreprocessorParser.SEEK].keywordText = "SEEK";
    allTokens[PreprocessorParser.SELECT].keywordText = "SELECT";
    allTokens[PreprocessorParser.SELECTION].keywordText = "SELECTION";
    allTokens[PreprocessorParser.SELECTIONLIST].keywordText = "SELECTION-LIST";
    allTokens[PreprocessorParser.SELF].keywordText = "SELF";
    allTokens[PreprocessorParser.SEND].keywordText = "SEND";
    allTokens[PreprocessorParser.SENDSQLSTATEMENT].keywordText = "SEND-SQL-STATEMENT";
    allTokens[PreprocessorParser.SEPARATECONNECTION].keywordText = "SEPARATE-CONNECTION";
    allTokens[PreprocessorParser.SEPARATORS].keywordText = "SEPARATORS";
    allTokens[PreprocessorParser.SERVER].keywordText = "SERVER";
    allTokens[PreprocessorParser.SERVERSOCKET].keywordText = "SERVER-SOCKET";
    allTokens[PreprocessorParser.SESSION].keywordText = "SESSION";
    allTokens[PreprocessorParser.SET].keywordText = "SET";
    allTokens[PreprocessorParser.SETBYTEORDER].keywordText = "SET-BYTE-ORDER";
    allTokens[PreprocessorParser.SETCONTENTS].keywordText = "SET-CONTENTS";
    allTokens[PreprocessorParser.SETCURRENTVALUE].keywordText = "SET-CURRENT-VALUE";
    allTokens[PreprocessorParser.SETPOINTERVALUE].keywordText = "SET-POINTER-VALUE";
    allTokens[PreprocessorParser.SETSIZE].keywordText = "SET-SIZE";
    allTokens[PreprocessorParser.SETUSERID].keywordText = "SETUSERID";
    allTokens[PreprocessorParser.SHARELOCK].keywordText = "SHARE-LOCK";
    allTokens[PreprocessorParser.SHARED].keywordText = "SHARED";
    allTokens[PreprocessorParser.SHOWSTATS].keywordText = "SHOW-STATS";
    allTokens[PreprocessorParser.SIDELABELS].keywordText = "SIDE-LABELS";
    allTokens[PreprocessorParser.SILENT].keywordText = "SILENT";
    allTokens[PreprocessorParser.SIMPLE].keywordText = "SIMPLE";
    allTokens[PreprocessorParser.SINGLE].keywordText = "SINGLE";
    allTokens[PreprocessorParser.SIZE].keywordText = "SIZE";
    allTokens[PreprocessorParser.SIZECHARS].keywordText = "SIZE-CHARS";
    allTokens[PreprocessorParser.SIZEPIXELS].keywordText = "SIZE-PIXELS";
    allTokens[PreprocessorParser.SKIP].keywordText = "SKIP";
    allTokens[PreprocessorParser.SKIPDELETEDRECORD].keywordText = "SKIP-DELETED-RECORD";
    allTokens[PreprocessorParser.SLIDER].keywordText = "SLIDER";
    allTokens[PreprocessorParser.SMALLINT].keywordText = "SMALLINT";
    allTokens[PreprocessorParser.SOCKET].keywordText = "SOCKET";
    allTokens[PreprocessorParser.SOME].keywordText = "SOME";
    allTokens[PreprocessorParser.SORT].keywordText = "SORT";
    allTokens[PreprocessorParser.SOURCE].keywordText = "SOURCE";
    allTokens[PreprocessorParser.SOURCEPROCEDURE].keywordText = "SOURCE-PROCEDURE";
    allTokens[PreprocessorParser.SPACE].keywordText = "SPACE";
    allTokens[PreprocessorParser.SQL].keywordText = "SQL";
    allTokens[PreprocessorParser.SQRT].keywordText = "SQRT";
    allTokens[PreprocessorParser.START].keywordText = "START";
    allTokens[PreprocessorParser.STARTMOVE].keywordText = "START-MOVE";
    allTokens[PreprocessorParser.STARTRESIZE].keywordText = "START-RESIZE";
    allTokens[PreprocessorParser.STARTROWRESIZE].keywordText = "START-ROW-RESIZE";
    allTokens[PreprocessorParser.STATUS].keywordText = "STATUS";
    allTokens[PreprocessorParser.STATUSBAR].keywordText = "STATUS-BAR";
    allTokens[PreprocessorParser.STDCALL_KW].keywordText = "STDCALL";
    allTokens[PreprocessorParser.STRETCHTOFIT].keywordText = "STRETCH-TO-FIT";
    allTokens[PreprocessorParser.STOP].keywordText = "STOP";
    allTokens[PreprocessorParser.STOREDPROCEDURE].keywordText = "STORED-PROCEDURE";
    allTokens[PreprocessorParser.STREAM].keywordText = "STREAM";
    allTokens[PreprocessorParser.STREAMIO].keywordText = "STREAM-IO";
    allTokens[PreprocessorParser.STRING].keywordText = "STRING";
    allTokens[PreprocessorParser.STRINGXREF].keywordText = "STRING-XREF";
    allTokens[PreprocessorParser.SUBAVERAGE].keywordText = "SUB-AVERAGE";
    allTokens[PreprocessorParser.SUBCOUNT].keywordText = "SUB-COUNT";
    allTokens[PreprocessorParser.SUBMAXIMUM].keywordText = "SUB-MAXIMUM";
    allTokens[PreprocessorParser.SUBMENU].keywordText = "SUB-MENU";
    allTokens[PreprocessorParser.SUBMENUHELP].keywordText = "SUB-MENU-HELP";
    allTokens[PreprocessorParser.SUBMINIMUM].keywordText = "SUB-MINIMUM";
    allTokens[PreprocessorParser.SUBTOTAL].keywordText = "SUB-TOTAL";
    allTokens[PreprocessorParser.SUBSCRIBE].keywordText = "SUBSCRIBE";
    allTokens[PreprocessorParser.SUBSTITUTE].keywordText = "SUBSTITUTE";
    allTokens[PreprocessorParser.SUBSTRING].keywordText = "SUBSTRING";
    allTokens[PreprocessorParser.SUM].keywordText = "SUM";
    allTokens[PreprocessorParser.SUMMARY].keywordText = "SUMMARY";
    allTokens[PreprocessorParser.SUPER].keywordText = "SUPER";
    allTokens[PreprocessorParser.SYSTEMDIALOG].keywordText = "SYSTEM-DIALOG";
    allTokens[PreprocessorParser.SYSTEMHELP].keywordText = "SYSTEM-HELP";
    allTokens[PreprocessorParser.TABLE].keywordText = "TABLE";
    allTokens[PreprocessorParser.TABLEHANDLE].keywordText = "TABLE-HANDLE";
    allTokens[PreprocessorParser.TABLENUMBER].keywordText = "TABLE-NUMBER";
    allTokens[PreprocessorParser.TABLESCAN].keywordText = "TABLE-SCAN";
    allTokens[PreprocessorParser.TARGET].keywordText = "TARGET";
    allTokens[PreprocessorParser.TARGETPROCEDURE].keywordText = "TARGET-PROCEDURE";
    allTokens[PreprocessorParser.TEMPTABLE].keywordText = "TEMP-TABLE";
    allTokens[PreprocessorParser.TERMINAL].keywordText = "TERMINAL";
    allTokens[PreprocessorParser.TERMINATE].keywordText = "TERMINATE";
    allTokens[PreprocessorParser.TEXT].keywordText = "TEXT";
    allTokens[PreprocessorParser.TEXTCURSOR].keywordText = "TEXT-CURSOR";
    allTokens[PreprocessorParser.TEXTSEGGROW].keywordText = "TEXT-SEG-GROWTH";
    allTokens[PreprocessorParser.THEN].keywordText = "THEN";
    allTokens[PreprocessorParser.THISPROCEDURE].keywordText = "THIS-PROCEDURE";
    allTokens[PreprocessorParser.THREED].keywordText = "THREE-D";
    allTokens[PreprocessorParser.THROUGH].keywordText = "THROUGH";
    allTokens[PreprocessorParser.TICMARKS].keywordText = "TIC-MARKS";
    allTokens[PreprocessorParser.TIME].keywordText = "TIME";
    allTokens[PreprocessorParser.TITLE].keywordText = "TITLE";
    allTokens[PreprocessorParser.TO].keywordText = "TO";
    allTokens[PreprocessorParser.TOOLBAR].keywordText = "TOOL-BAR";
    allTokens[PreprocessorParser.TOOLTIP].keywordText = "TOOLTIP";
    allTokens[PreprocessorParser.TOROWID].keywordText = "TO-ROWID";
    allTokens[PreprocessorParser.TODAY].keywordText = "TODAY";
    allTokens[PreprocessorParser.TOGGLEBOX].keywordText = "TOGGLE-BOX";
    allTokens[PreprocessorParser.TOP].keywordText = "TOP";
    allTokens[PreprocessorParser.TOPONLY].keywordText = "TOP-ONLY";
    allTokens[PreprocessorParser.TOPIC].keywordText = "TOPIC";
    allTokens[PreprocessorParser.TOTAL].keywordText = "TOTAL";
    allTokens[PreprocessorParser.TRANSACTION].keywordText = "TRANSACTION";
    allTokens[PreprocessorParser.TRANSACTIONMODE].keywordText = "TRANSACTION-MODE";
    allTokens[PreprocessorParser.TRANSPARENT].keywordText = "TRANSPARENT";
    allTokens[PreprocessorParser.TRAILING].keywordText = "TRAILING";
    allTokens[PreprocessorParser.TRIGGER].keywordText = "TRIGGER";
    allTokens[PreprocessorParser.TRIGGERS].keywordText = "TRIGGERS";
    allTokens[PreprocessorParser.TRIM].keywordText = "TRIM";
    allTokens[PreprocessorParser.TRUE_KW].keywordText = "TRUE";
    allTokens[PreprocessorParser.TRUNCATE].keywordText = "TRUNCATE";
    allTokens[PreprocessorParser.UNBUFFERED].keywordText = "UNBUFFERED";
    allTokens[PreprocessorParser.UNDERLINE].keywordText = "UNDERLINE";
    allTokens[PreprocessorParser.UNDO].keywordText = "UNDO";
    allTokens[PreprocessorParser.UNFORMATTED].keywordText = "UNFORMATTED";
    allTokens[PreprocessorParser.UNION].keywordText = "UNION";
    allTokens[PreprocessorParser.UNIQUE].keywordText = "UNIQUE";
    allTokens[PreprocessorParser.UNIQUEMATCH].keywordText = "UNIQUE-MATCH";
    allTokens[PreprocessorParser.UNIX].keywordText = "UNIX";
    allTokens[PreprocessorParser.UNLESSHIDDEN].keywordText = "UNLESS-HIDDEN";
    allTokens[PreprocessorParser.UNLOAD].keywordText = "UNLOAD";
    allTokens[PreprocessorParser.UNSUBSCRIBE].keywordText = "UNSUBSCRIBE";
    allTokens[PreprocessorParser.UP].keywordText = "UP";
    allTokens[PreprocessorParser.UPDATE].keywordText = "UPDATE";
    allTokens[PreprocessorParser.URLDECODE].keywordText = "URL-DECODE";
    allTokens[PreprocessorParser.URLENCODE].keywordText = "URL-ENCODE";
    allTokens[PreprocessorParser.USE].keywordText = "USE";
    allTokens[PreprocessorParser.USEDICTEXPS].keywordText = "USE-DICT-EXPS";
    allTokens[PreprocessorParser.USEFILENAME].keywordText = "USE-FILENAME";
    allTokens[PreprocessorParser.USEINDEX].keywordText = "USE-INDEX";
    allTokens[PreprocessorParser.USER].keywordText = "USER";
    allTokens[PreprocessorParser.USERID].keywordText = "USERID";
    allTokens[PreprocessorParser.USEREVVIDEO].keywordText = "USE-REVVIDEO";
    allTokens[PreprocessorParser.USETEXT].keywordText = "USE-TEXT";
    allTokens[PreprocessorParser.USEUNDERLINE].keywordText = "USE-UNDERLINE";
    allTokens[PreprocessorParser.USING].keywordText = "USING";
    allTokens[PreprocessorParser.V6FRAME].keywordText = "V6FRAME";
    allTokens[PreprocessorParser.VALIDEVENT].keywordText = "VALID-EVENT";
    allTokens[PreprocessorParser.VALIDHANDLE].keywordText = "VALID-HANDLE";
    allTokens[PreprocessorParser.VALIDATE].keywordText = "VALIDATE";
    allTokens[PreprocessorParser.VALUE].keywordText = "VALUE";
    allTokens[PreprocessorParser.VALUECHANGED].keywordText = "VALUE-CHANGED";
    allTokens[PreprocessorParser.VALUES].keywordText = "VALUES";
    allTokens[PreprocessorParser.VARIABLE].keywordText = "VARIABLE";
    allTokens[PreprocessorParser.VERBOSE].keywordText = "VERBOSE";
    allTokens[PreprocessorParser.VERTICAL].keywordText = "VERTICAL";
    allTokens[PreprocessorParser.VIEW].keywordText = "VIEW";
    allTokens[PreprocessorParser.VIEWAS].keywordText = "VIEW-AS";
    allTokens[PreprocessorParser.VMS].keywordText = "VMS";
    allTokens[PreprocessorParser.WAIT].keywordText = "WAIT";
    allTokens[PreprocessorParser.WAITFOR].keywordText = "WAIT-FOR";
    allTokens[PreprocessorParser.WARNING].keywordText = "WARNING";
    allTokens[PreprocessorParser.WEBCONTEXT].keywordText = "WEB-CONTEXT";
    allTokens[PreprocessorParser.WEEKDAY].keywordText = "WEEKDAY";
    allTokens[PreprocessorParser.WHEN].keywordText = "WHEN";
    allTokens[PreprocessorParser.WHERE].keywordText = "WHERE";
    allTokens[PreprocessorParser.WHILE].keywordText = "WHILE";
    allTokens[PreprocessorParser.WIDGET].keywordText = "WIDGET";
    allTokens[PreprocessorParser.WIDGETHANDLE].keywordText = "WIDGET-HANDLE";
    allTokens[PreprocessorParser.WIDGETPOOL].keywordText = "WIDGET-POOL";
    allTokens[PreprocessorParser.WIDTH].keywordText = "WIDTH";
    allTokens[PreprocessorParser.WIDTHCHARS].keywordText = "WIDTH-CHARS";
    allTokens[PreprocessorParser.WIDTHPIXELS].keywordText = "WIDTH-PIXELS";
    allTokens[PreprocessorParser.WINDOW].keywordText = "WINDOW";
    allTokens[PreprocessorParser.WINDOWDELAYEDMINIMIZE].keywordText = "WINDOW-DELAYED-MINIMIZE";
    allTokens[PreprocessorParser.WINDOWMAXIMIZED].keywordText = "WINDOW-MAXIMIZED";
    allTokens[PreprocessorParser.WINDOWMINIMIZED].keywordText = "WINDOW-MINIMIZED";
    allTokens[PreprocessorParser.WINDOWNAME].keywordText = "WINDOW-NAME";
    allTokens[PreprocessorParser.WINDOWNORMAL].keywordText = "WINDOW-NORMAL";
    allTokens[PreprocessorParser.WITH].keywordText = "WITH";
    allTokens[PreprocessorParser.WORDINDEX].keywordText = "WORD-INDEX";
    allTokens[PreprocessorParser.WORKTABLE].keywordText = "WORK-TABLE";
    allTokens[PreprocessorParser.WRITE].keywordText = "WRITE";
    allTokens[PreprocessorParser.X].keywordText = "X";
    allTokens[PreprocessorParser.XDOCUMENT].keywordText = "X-DOCUMENT";
    allTokens[PreprocessorParser.XNODEREF].keywordText = "X-NODEREF";
    allTokens[PreprocessorParser.XOF].keywordText = "X-OF";
    allTokens[PreprocessorParser.XCODE].keywordText = "XCODE";
    allTokens[PreprocessorParser.XREF].keywordText = "XREF";
    allTokens[PreprocessorParser.Y].keywordText = "Y";
    allTokens[PreprocessorParser.YOF].keywordText = "Y-OF";
    allTokens[PreprocessorParser.YEAR].keywordText = "YEAR";
    allTokens[PreprocessorParser.YES].keywordText = "YES";
    allTokens[PreprocessorParser.YESNO].keywordText = "YES-NO";
    allTokens[PreprocessorParser.YESNOCANCEL].keywordText = "YES-NO-CANCEL";
    allTokens[PreprocessorParser.FUNCTIONCALLTYPE].keywordText = "FUNCTION-CALL-TYPE";
    allTokens[PreprocessorParser.GETATTRCALLTYPE].keywordText = "GET-ATTR-CALL-TYPE";
    allTokens[PreprocessorParser.PROCEDURECALLTYPE].keywordText = "PROCEDURE-CALL-TYPE";
    allTokens[PreprocessorParser.SAXCOMPLETE].keywordText = "SAX-COMPLETE";
    allTokens[PreprocessorParser.SAXPARSERERROR].keywordText = "SAX-PARSER-ERROR";
    allTokens[PreprocessorParser.SAXRUNNING].keywordText = "SAX-RUNNING";
    allTokens[PreprocessorParser.SAXUNINITIALIZED].keywordText = "SAX-UNINITIALIZED";
    allTokens[PreprocessorParser.SETATTRCALLTYPE].keywordText = "SET-ATTR-CALL-TYPE";
    allTokens[PreprocessorParser.COPYLOB].keywordText = "COPY-LOB";
    allTokens[PreprocessorParser.DATARELATION].keywordText = "DATA-RELATION";
    allTokens[PreprocessorParser.DATASOURCE].keywordText = "DATA-SOURCE";
    allTokens[PreprocessorParser.DATASET].keywordText = "DATASET";
    allTokens[PreprocessorParser.DATASETHANDLE].keywordText = "DATASET-HANDLE";
    allTokens[PreprocessorParser.LOGMANAGER].keywordText = "LOG-MANAGER";
    allTokens[PreprocessorParser.NOLOBS].keywordText = "NO-LOBS";
    allTokens[PreprocessorParser.NOW].keywordText = "NOW";
    allTokens[PreprocessorParser.STARTING].keywordText = "STARTING";
    allTokens[PreprocessorParser.BASE64].keywordText = "BASE64";
    allTokens[PreprocessorParser.SOAPHEADER].keywordText = "SOAP-HEADER";
    allTokens[PreprocessorParser.SOAPHEADERENTRYREF].keywordText = "SOAP-HEADER-ENTRYREF";
    allTokens[PreprocessorParser.BLOB].keywordText = "BLOB";
    allTokens[PreprocessorParser.CLOB].keywordText = "CLOB";
    allTokens[PreprocessorParser.DATETIME].keywordText = "DATETIME";
    allTokens[PreprocessorParser.DATETIMETZ].keywordText = "DATETIME-TZ";
    allTokens[PreprocessorParser.LONGCHAR].keywordText = "LONGCHAR";
    allTokens[PreprocessorParser.RELATIONFIELDS].keywordText = "RELATION-FIELDS";
    allTokens[PreprocessorParser.TTCODEPAGE].keywordText = "TTCODEPAGE";
    allTokens[PreprocessorParser.COLUMNCODEPAGE].keywordText = "COLUMN-CODEPAGE";
    allTokens[PreprocessorParser.DYNAMICCURRENTVALUE].keywordText = "DYNAMIC-CURRENT-VALUE";
    allTokens[PreprocessorParser.DYNAMICNEXTVALUE].keywordText = "DYNAMIC-NEXT-VALUE";
    allTokens[PreprocessorParser.FIXCODEPAGE].keywordText = "FIX-CODEPAGE";
    allTokens[PreprocessorParser.INTERVAL].keywordText = "INTERVAL";
    allTokens[PreprocessorParser.ISCODEPAGEFIXED].keywordText = "IS-CODEPAGE-FIXED";
    allTokens[PreprocessorParser.ISCOLUMNCODEPAGE].keywordText = "IS-COLUMN-CODEPAGE";
    allTokens[PreprocessorParser.ISODATE].keywordText = "ISO-DATE";
    allTokens[PreprocessorParser.MTIME].keywordText = "MTIME";
    allTokens[PreprocessorParser.LOBDIR].keywordText = "LOB-DIR";
    allTokens[PreprocessorParser.TIMEZONE].keywordText = "TIMEZONE";
    allTokens[PreprocessorParser.BYVALUE].keywordText = "BY-VALUE";
    allTokens[PreprocessorParser.BYREFERENCE].keywordText = "BY-REFERENCE";
    allTokens[PreprocessorParser.ADDINTERVAL].keywordText = "ADD-INTERVAL";
    allTokens[PreprocessorParser.GETDIR].keywordText = "GET-DIR";
    allTokens[PreprocessorParser.CURRENCY].keywordText = "CURRENCY";
    allTokens[PreprocessorParser.ERRORCODE].keywordText = "ERROR-CODE";
    allTokens[PreprocessorParser.IUNKNOWN].keywordText = "IUNKNOWN";
    allTokens[PreprocessorParser.SHORT].keywordText = "SHORT";
    allTokens[PreprocessorParser.UNSIGNEDBYTE].keywordText = "UNSIGNED-BYTE";
    allTokens[PreprocessorParser.UNSIGNEDSHORT].keywordText = "UNSIGNED-SHORT";
    allTokens[PreprocessorParser.CODEPAGE].keywordText = "CODEPAGE";
    allTokens[PreprocessorParser.BASE64DECODE].keywordText = "BASE64-DECODE";
    allTokens[PreprocessorParser.BASE64ENCODE].keywordText = "BASE64-ENCODE";
    allTokens[PreprocessorParser.BATCHSIZE].keywordText = "BATCH-SIZE";
    allTokens[PreprocessorParser.BEFORETABLE].keywordText = "BEFORE-TABLE";
    allTokens[PreprocessorParser.COPYDATASET].keywordText = "COPY-DATASET";
    allTokens[PreprocessorParser.COPYTEMPTABLE].keywordText = "COPY-TEMP-TABLE";
    allTokens[PreprocessorParser.DATASOURCEMODIFIED].keywordText = "DATA-SOURCE-MODIFIED";
    allTokens[PreprocessorParser.DECRYPT].keywordText = "DECRYPT";
    allTokens[PreprocessorParser.DELETECHARACTER].keywordText = "DELETE-CHARACTER";
    allTokens[PreprocessorParser.ENABLEDFIELDS].keywordText = "ENABLED-FIELDS";
    allTokens[PreprocessorParser.ENCRYPT].keywordText = "ENCRYPT";
    allTokens[PreprocessorParser.ENCRYPTIONSALT].keywordText = "ENCRYPTION-SALT";
    allTokens[PreprocessorParser.FORMLONGINPUT].keywordText = "FORM-LONG-INPUT";
    allTokens[PreprocessorParser.GENERATEPBEKEY].keywordText = "GENERATE-PBE-KEY";
    allTokens[PreprocessorParser.GENERATEPBESALT].keywordText = "GENERATE-PBE-SALT";
    allTokens[PreprocessorParser.GENERATERANDOMKEY].keywordText = "GENERATE-RANDOM-KEY";
    allTokens[PreprocessorParser.GETCGILONGVALUE].keywordText = "GET-CGI-LONG-VALUE";
    allTokens[PreprocessorParser.LASTBATCH].keywordText = "LAST-BATCH";
    allTokens[PreprocessorParser.MD5DIGEST].keywordText = "MD5-DIGEST";
    allTokens[PreprocessorParser.MERGEBYFIELD].keywordText = "MERGE-BY-FIELD";
    allTokens[PreprocessorParser.NORMALIZE].keywordText = "NORMALIZE";
    allTokens[PreprocessorParser.PBEHASHALGORITHM].keywordText = "PBE-HASH-ALGORITHM";
    allTokens[PreprocessorParser.PBEKEYROUNDS].keywordText = "PBE-KEY-ROUNDS";
    allTokens[PreprocessorParser.PREFERDATASET].keywordText = "PREFER-DATASET";
    allTokens[PreprocessorParser.REJECTED].keywordText = "REJECTED";
    allTokens[PreprocessorParser.REPOSITIONMODE].keywordText = "REPOSITION-MODE";
    allTokens[PreprocessorParser.ROWSTATE].keywordText = "ROW-STATE";
    allTokens[PreprocessorParser.ROWUNMODIFIED].keywordText = "ROW-UNMODIFIED";
    allTokens[PreprocessorParser.ROWDELETED].keywordText = "ROW-DELETED";
    allTokens[PreprocessorParser.ROWMODIFIED].keywordText = "ROW-MODIFIED";
    allTokens[PreprocessorParser.ROWCREATED].keywordText = "ROW-CREATED";
    allTokens[PreprocessorParser.SECURITYPOLICY].keywordText = "SECURITY-POLICY";
    allTokens[PreprocessorParser.SHA1DIGEST].keywordText = "SHA1-DIGEST";
    allTokens[PreprocessorParser.SSLSERVERNAME].keywordText = "SSL-SERVER-NAME";
    allTokens[PreprocessorParser.SYMMETRICENCRYPTIONALGORITHM].keywordText = "SYMMETRIC-ENCRYPTION-ALGORITHM";
    allTokens[PreprocessorParser.SYMMETRICENCRYPTIONIV].keywordText = "SYMMETRIC-ENCRYPTION-IV";
    allTokens[PreprocessorParser.SYMMETRICENCRYPTIONKEY].keywordText = "SYMMETRIC-ENCRYPTION-KEY";
    allTokens[PreprocessorParser.SYMMETRICSUPPORT].keywordText = "SYMMETRIC-SUPPORT";
    allTokens[PreprocessorParser.TRANSINITPROCEDURE].keywordText = "TRANS-INIT-PROCEDURE";

    // OpenEdge 10.1, Proparse 3.0.
    allTokens[PreprocessorParser.BIGINT].keywordText = "BIGINT";
    allTokens[PreprocessorParser.TIMESTAMP].keywordText = "TIMESTAMP";
    allTokens[PreprocessorParser.FIXCHAR].keywordText = "FIXCHAR";
    allTokens[PreprocessorParser.AUDITCONTROL].keywordText = "AUDIT-CONTROL";
    allTokens[PreprocessorParser.AUDITENABLED].keywordText = "AUDIT-ENABLED";
    allTokens[PreprocessorParser.AUDITPOLICY].keywordText = "AUDIT-POLICY";
    allTokens[PreprocessorParser.BIND].keywordText = "BIND";
    allTokens[PreprocessorParser.CAST].keywordText = "CAST";
    allTokens[PreprocessorParser.CLASS].keywordText = "CLASS";
    allTokens[PreprocessorParser.CLIENTPRINCIPAL].keywordText = "CLIENT-PRINCIPAL";
    allTokens[PreprocessorParser.CONSTRUCTOR].keywordText = "CONSTRUCTOR";
    allTokens[PreprocessorParser.FINAL].keywordText = "FINAL";
    allTokens[PreprocessorParser.GENERATEUUID].keywordText = "GENERATE-UUID";
    allTokens[PreprocessorParser.GUID].keywordText = "GUID";
    allTokens[PreprocessorParser.HEXDECODE].keywordText = "HEX-DECODE";
    allTokens[PreprocessorParser.HEXENCODE].keywordText = "HEX-ENCODE";
    allTokens[PreprocessorParser.IMPLEMENTS].keywordText = "IMPLEMENTS";
    allTokens[PreprocessorParser.INHERITS].keywordText = "INHERITS";
    allTokens[PreprocessorParser.INTERFACE].keywordText = "INTERFACE";
    allTokens[PreprocessorParser.METHOD].keywordText = "METHOD";
    allTokens[PreprocessorParser.NAMESPACEPREFIX].keywordText = "NAMESPACE-PREFIX";
    allTokens[PreprocessorParser.NAMESPACEURI].keywordText = "NAMESPACE-URI";
    allTokens[PreprocessorParser.NEWINSTANCE].keywordText = "NEW-INSTANCE";
    allTokens[PreprocessorParser.PROTECTED].keywordText = "PROTECTED";
    allTokens[PreprocessorParser.REFERENCEONLY].keywordText = "REFERENCE-ONLY";
    allTokens[PreprocessorParser.SAXWRITER].keywordText = "SAX-WRITER";
    allTokens[PreprocessorParser.SETDBCLIENT].keywordText = "SET-DB-CLIENT";
    allTokens[PreprocessorParser.THISOBJECT].keywordText = "THIS-OBJECT";
    allTokens[PreprocessorParser.TYPEOF].keywordText = "TYPE-OF";
    allTokens[PreprocessorParser.VALIDOBJECT].keywordText = "VALID-OBJECT";
    allTokens[PreprocessorParser.XMLDATATYPE].keywordText = "XML-DATA-TYPE";
    allTokens[PreprocessorParser.XMLNODETYPE].keywordText = "XML-NODE-TYPE";
    allTokens[PreprocessorParser.WIDGETID].keywordText = "WIDGET-ID";
    allTokens[PreprocessorParser.DESTRUCTOR].keywordText = "DESTRUCTOR";
    allTokens[PreprocessorParser.VOID].keywordText = "VOID";
    allTokens[PreprocessorParser.NESTED].keywordText = "NESTED";
    allTokens[PreprocessorParser.ROUNDED].keywordText = "ROUNDED";
    allTokens[PreprocessorParser.GROUPBOX].keywordText = "GROUP-BOX";
    allTokens[PreprocessorParser.PASSWORDFIELD].keywordText = "PASSWORD-FIELD";

    // OpenEdge 10.1B, Proparse 3.1
    allTokens[PreprocessorParser.ROUNDED].keywordText = "ROUNDED";
    allTokens[PreprocessorParser.GROUPBOX].keywordText = "GROUP-BOX";
    allTokens[PreprocessorParser.FALSELEAKS].keywordText = "FALSE-LEAKS";
    allTokens[PreprocessorParser.LEAKDETECTION].keywordText = "LEAK-DETECTION";
    allTokens[PreprocessorParser.SAXWRITEBEGIN].keywordText = "SAX-WRITE-BEGIN";
    allTokens[PreprocessorParser.SAXWRITECOMPLETE].keywordText = "SAX-WRITE-COMPLETE";
    allTokens[PreprocessorParser.SAXWRITECONTENT].keywordText = "SAX-WRITE-CONTENT";
    allTokens[PreprocessorParser.SAXWRITEELEMENT].keywordText = "SAX-WRITE-ELEMENT";
    allTokens[PreprocessorParser.SAXWRITEERROR].keywordText = "SAX-WRITE-ERROR";
    allTokens[PreprocessorParser.SAXWRITEIDLE].keywordText = "SAX-WRITE-IDLE";
    allTokens[PreprocessorParser.SAXWRITETAG].keywordText = "SAX-WRITE-TAG";
    allTokens[PreprocessorParser.STOMPDETECTION].keywordText = "STOMP-DETECTION";
    allTokens[PreprocessorParser.STOMPFREQUENCY].keywordText = "STOMP-FREQUENCY";
    allTokens[PreprocessorParser.INT64].keywordText = "INT64";
    allTokens[PreprocessorParser.PUTINT64].keywordText = "PUT-INT64";
    allTokens[PreprocessorParser.GETINT64].keywordText = "GET-INT64";
    allTokens[PreprocessorParser.PUTUNSIGNEDLONG].keywordText = "PUT-UNSIGNED-LONG";
    allTokens[PreprocessorParser.GETUNSIGNEDLONG].keywordText = "GET-UNSIGNED-LONG";
    allTokens[PreprocessorParser.PROPERTY].keywordText = "PROPERTY";
    allTokens[PreprocessorParser.SAXATTRIBUTES].keywordText = "SAX-ATTRIBUTES";
    allTokens[PreprocessorParser.INHERITBGCOLOR].keywordText = "INHERIT-BGCOLOR";
    allTokens[PreprocessorParser.NOINHERITBGCOLOR].keywordText = "NO-INHERIT-BGCOLOR";
    allTokens[PreprocessorParser.INHERITFGCOLOR].keywordText = "INHERIT-FGCOLOR";
    allTokens[PreprocessorParser.NOINHERITFGCOLOR].keywordText = "NO-INHERIT-FGCOLOR";
    allTokens[PreprocessorParser.USEWIDGETPOOL].keywordText = "USE-WIDGET-POOL";
    allTokens[PreprocessorParser.XREFXML].keywordText = "XREF-XML";

    // 10.1C and 10.2 keywords.
    allTokens[PreprocessorParser.ACTIVEFORM].keywordText = "ACTIVE-FORM";
    allTokens[PreprocessorParser.ASSEMBLY].keywordText = "ASSEMBLY";
    allTokens[PreprocessorParser.CATCH].keywordText = "CATCH";
    allTokens[PreprocessorParser.CREATELIKESEQUENTIAL].keywordText = "CREATE-LIKE-SEQUENTIAL";
    allTokens[PreprocessorParser.CURRENTQUERY].keywordText = "CURRENT-QUERY";
    allTokens[PreprocessorParser.DATASOURCEROWID].keywordText = "DATA-SOURCE-ROWID";
    allTokens[PreprocessorParser.DEFAULTVALUE].keywordText = "DEFAULT-VALUE";
    allTokens[PreprocessorParser.ERRORSTACKTRACE].keywordText = "ERROR-STACK-TRACE";
    allTokens[PreprocessorParser.FINALLY].keywordText = "FINALLY";
    allTokens[PreprocessorParser.FIRSTFORM].keywordText = "FIRST-FORM";
    allTokens[PreprocessorParser.LASTFORM].keywordText = "LAST-FORM";
    allTokens[PreprocessorParser.LIKESEQUENTIAL].keywordText = "LIKE-SEQUENTIAL";
    allTokens[PreprocessorParser.MARKNEW].keywordText = "MARK-NEW";
    allTokens[PreprocessorParser.MARKROWSTATE].keywordText = "MARK-ROW-STATE";
    allTokens[PreprocessorParser.MAXIMUMLEVEL].keywordText = "MAXIMUM-LEVEL";
    allTokens[PreprocessorParser.NOTACTIVE].keywordText = "NOT-ACTIVE";
    allTokens[PreprocessorParser.RESTARTROW].keywordText = "RESTART-ROW";
    allTokens[PreprocessorParser.ROUTINELEVEL].keywordText = "ROUTINE-LEVEL";
    allTokens[PreprocessorParser.STATIC].keywordText = "STATIC";
    allTokens[PreprocessorParser.STREAMHANDLE].keywordText = "STREAM-HANDLE";
    allTokens[PreprocessorParser.THROW].keywordText = "THROW";
    allTokens[PreprocessorParser.TOPNAVQUERY].keywordText = "TOP-NAV-QUERY";
    allTokens[PreprocessorParser.UNBOX].keywordText = "UNBOX";
    allTokens[PreprocessorParser.BOX].keywordText = "BOX";
    allTokens[PreprocessorParser.DBREMOTEHOST].keywordText = "DB-REMOTE-HOST";
    allTokens[PreprocessorParser.DYNAMICCAST].keywordText = "DYNAMIC-CAST";
    allTokens[PreprocessorParser.XMLNODENAME].keywordText = "XML-NODE-NAME";
    allTokens[PreprocessorParser.FOREIGNKEYHIDDEN].keywordText = "FOREIGN-KEY-HIDDEN";

    // Mike Fechner / Consultingwerk Ltd.
    allTokens[PreprocessorParser.BLOCKLEVEL].keywordText = "BLOCK-LEVEL";
    allTokens[PreprocessorParser.GETCLASS].keywordText = "GET-CLASS";

    allTokens[PreprocessorParser.ENUM].keywordText = "ENUM";
    allTokens[PreprocessorParser.FLAGS].keywordText = "FLAGS";
  }
  // NO-SONAR-END

}
